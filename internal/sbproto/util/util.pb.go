// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: protolib/util.proto

package util

import (
	snowblossom "go.snowblossom/internal/sbproto/snowblossom"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Offer_OfferMode int32

const (
	Offer_UNDEFINED      Offer_OfferMode = 0
	Offer_FOREVER_ACCESS Offer_OfferMode = 1
)

// Enum value maps for Offer_OfferMode.
var (
	Offer_OfferMode_name = map[int32]string{
		0: "UNDEFINED",
		1: "FOREVER_ACCESS",
	}
	Offer_OfferMode_value = map[string]int32{
		"UNDEFINED":      0,
		"FOREVER_ACCESS": 1,
	}
)

func (x Offer_OfferMode) Enum() *Offer_OfferMode {
	p := new(Offer_OfferMode)
	*p = x
	return p
}

func (x Offer_OfferMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Offer_OfferMode) Descriptor() protoreflect.EnumDescriptor {
	return file_protolib_util_proto_enumTypes[0].Descriptor()
}

func (Offer_OfferMode) Type() protoreflect.EnumType {
	return &file_protolib_util_proto_enumTypes[0]
}

func (x Offer_OfferMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Offer_OfferMode.Descriptor instead.
func (Offer_OfferMode) EnumDescriptor() ([]byte, []int) {
	return file_protolib_util_proto_rawDescGZIP(), []int{8, 0}
}

type TransactionFactoryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outputs         []*snowblossom.TransactionOutput `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Sign            bool                             `protobuf:"varint,2,opt,name=sign,proto3" json:"sign,omitempty"`
	SplitChangeOver int64                            `protobuf:"varint,3,opt,name=split_change_over,json=splitChangeOver,proto3" json:"split_change_over,omitempty"` // Split change outputs if over this many flakes
	// Types that are assignable to ChangeMode:
	//	*TransactionFactoryConfig_ChangeRandomFromWallet
	//	*TransactionFactoryConfig_ChangeFreshAddress
	//	*TransactionFactoryConfig_ChangeSpecificAddresses
	ChangeMode      isTransactionFactoryConfig_ChangeMode `protobuf_oneof:"change_mode"`
	ChangeAddresses [][]byte                              `protobuf:"bytes,7,rep,name=change_addresses,json=changeAddresses,proto3" json:"change_addresses,omitempty"`
	// Types that are assignable to InputMode:
	//	*TransactionFactoryConfig_InputSpecificList
	//	*TransactionFactoryConfig_InputConfirmedThenPending
	//	*TransactionFactoryConfig_InputConfirmedOnly
	InputMode isTransactionFactoryConfig_InputMode `protobuf_oneof:"input_mode"`
	Inputs    []*UTXOEntry                         `protobuf:"bytes,11,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Types that are assignable to FeeMode:
	//	*TransactionFactoryConfig_FeeFlat
	//	*TransactionFactoryConfig_FeeUseEstimate
	FeeMode        isTransactionFactoryConfig_FeeMode `protobuf_oneof:"fee_mode"`
	Extra          []byte                             `protobuf:"bytes,14,opt,name=extra,proto3" json:"extra,omitempty"`
	SendAll        bool                               `protobuf:"varint,15,opt,name=send_all,json=sendAll,proto3" json:"send_all,omitempty"`
	AllowSplitSend bool                               `protobuf:"varint,18,opt,name=allow_split_send,json=allowSplitSend,proto3" json:"allow_split_send,omitempty"` // If needed, form multiple send transactions
	// from different shards to complete the outputs
	ChangeShardId int32 `protobuf:"varint,19,opt,name=change_shard_id,json=changeShardId,proto3" json:"change_shard_id,omitempty"`
}

func (x *TransactionFactoryConfig) Reset() {
	*x = TransactionFactoryConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_util_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionFactoryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionFactoryConfig) ProtoMessage() {}

func (x *TransactionFactoryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_util_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionFactoryConfig.ProtoReflect.Descriptor instead.
func (*TransactionFactoryConfig) Descriptor() ([]byte, []int) {
	return file_protolib_util_proto_rawDescGZIP(), []int{0}
}

func (x *TransactionFactoryConfig) GetOutputs() []*snowblossom.TransactionOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TransactionFactoryConfig) GetSign() bool {
	if x != nil {
		return x.Sign
	}
	return false
}

func (x *TransactionFactoryConfig) GetSplitChangeOver() int64 {
	if x != nil {
		return x.SplitChangeOver
	}
	return 0
}

func (m *TransactionFactoryConfig) GetChangeMode() isTransactionFactoryConfig_ChangeMode {
	if m != nil {
		return m.ChangeMode
	}
	return nil
}

func (x *TransactionFactoryConfig) GetChangeRandomFromWallet() bool {
	if x, ok := x.GetChangeMode().(*TransactionFactoryConfig_ChangeRandomFromWallet); ok {
		return x.ChangeRandomFromWallet
	}
	return false
}

func (x *TransactionFactoryConfig) GetChangeFreshAddress() bool {
	if x, ok := x.GetChangeMode().(*TransactionFactoryConfig_ChangeFreshAddress); ok {
		return x.ChangeFreshAddress
	}
	return false
}

func (x *TransactionFactoryConfig) GetChangeSpecificAddresses() bool {
	if x, ok := x.GetChangeMode().(*TransactionFactoryConfig_ChangeSpecificAddresses); ok {
		return x.ChangeSpecificAddresses
	}
	return false
}

func (x *TransactionFactoryConfig) GetChangeAddresses() [][]byte {
	if x != nil {
		return x.ChangeAddresses
	}
	return nil
}

func (m *TransactionFactoryConfig) GetInputMode() isTransactionFactoryConfig_InputMode {
	if m != nil {
		return m.InputMode
	}
	return nil
}

func (x *TransactionFactoryConfig) GetInputSpecificList() bool {
	if x, ok := x.GetInputMode().(*TransactionFactoryConfig_InputSpecificList); ok {
		return x.InputSpecificList
	}
	return false
}

func (x *TransactionFactoryConfig) GetInputConfirmedThenPending() bool {
	if x, ok := x.GetInputMode().(*TransactionFactoryConfig_InputConfirmedThenPending); ok {
		return x.InputConfirmedThenPending
	}
	return false
}

func (x *TransactionFactoryConfig) GetInputConfirmedOnly() bool {
	if x, ok := x.GetInputMode().(*TransactionFactoryConfig_InputConfirmedOnly); ok {
		return x.InputConfirmedOnly
	}
	return false
}

func (x *TransactionFactoryConfig) GetInputs() []*UTXOEntry {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (m *TransactionFactoryConfig) GetFeeMode() isTransactionFactoryConfig_FeeMode {
	if m != nil {
		return m.FeeMode
	}
	return nil
}

func (x *TransactionFactoryConfig) GetFeeFlat() int64 {
	if x, ok := x.GetFeeMode().(*TransactionFactoryConfig_FeeFlat); ok {
		return x.FeeFlat
	}
	return 0
}

func (x *TransactionFactoryConfig) GetFeeUseEstimate() bool {
	if x, ok := x.GetFeeMode().(*TransactionFactoryConfig_FeeUseEstimate); ok {
		return x.FeeUseEstimate
	}
	return false
}

func (x *TransactionFactoryConfig) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *TransactionFactoryConfig) GetSendAll() bool {
	if x != nil {
		return x.SendAll
	}
	return false
}

func (x *TransactionFactoryConfig) GetAllowSplitSend() bool {
	if x != nil {
		return x.AllowSplitSend
	}
	return false
}

func (x *TransactionFactoryConfig) GetChangeShardId() int32 {
	if x != nil {
		return x.ChangeShardId
	}
	return 0
}

type isTransactionFactoryConfig_ChangeMode interface {
	isTransactionFactoryConfig_ChangeMode()
}

type TransactionFactoryConfig_ChangeRandomFromWallet struct {
	ChangeRandomFromWallet bool `protobuf:"varint,4,opt,name=change_random_from_wallet,json=changeRandomFromWallet,proto3,oneof"`
}

type TransactionFactoryConfig_ChangeFreshAddress struct {
	ChangeFreshAddress bool `protobuf:"varint,5,opt,name=change_fresh_address,json=changeFreshAddress,proto3,oneof"`
}

type TransactionFactoryConfig_ChangeSpecificAddresses struct {
	ChangeSpecificAddresses bool `protobuf:"varint,6,opt,name=change_specific_addresses,json=changeSpecificAddresses,proto3,oneof"`
}

func (*TransactionFactoryConfig_ChangeRandomFromWallet) isTransactionFactoryConfig_ChangeMode() {}

func (*TransactionFactoryConfig_ChangeFreshAddress) isTransactionFactoryConfig_ChangeMode() {}

func (*TransactionFactoryConfig_ChangeSpecificAddresses) isTransactionFactoryConfig_ChangeMode() {}

type isTransactionFactoryConfig_InputMode interface {
	isTransactionFactoryConfig_InputMode()
}

type TransactionFactoryConfig_InputSpecificList struct {
	InputSpecificList bool `protobuf:"varint,8,opt,name=input_specific_list,json=inputSpecificList,proto3,oneof"`
}

type TransactionFactoryConfig_InputConfirmedThenPending struct {
	InputConfirmedThenPending bool `protobuf:"varint,9,opt,name=input_confirmed_then_pending,json=inputConfirmedThenPending,proto3,oneof"`
}

type TransactionFactoryConfig_InputConfirmedOnly struct {
	InputConfirmedOnly bool `protobuf:"varint,10,opt,name=input_confirmed_only,json=inputConfirmedOnly,proto3,oneof"`
}

func (*TransactionFactoryConfig_InputSpecificList) isTransactionFactoryConfig_InputMode() {}

func (*TransactionFactoryConfig_InputConfirmedThenPending) isTransactionFactoryConfig_InputMode() {}

func (*TransactionFactoryConfig_InputConfirmedOnly) isTransactionFactoryConfig_InputMode() {}

type isTransactionFactoryConfig_FeeMode interface {
	isTransactionFactoryConfig_FeeMode()
}

type TransactionFactoryConfig_FeeFlat struct {
	FeeFlat int64 `protobuf:"varint,12,opt,name=fee_flat,json=feeFlat,proto3,oneof"`
}

type TransactionFactoryConfig_FeeUseEstimate struct {
	FeeUseEstimate bool `protobuf:"varint,13,opt,name=fee_use_estimate,json=feeUseEstimate,proto3,oneof"`
}

func (*TransactionFactoryConfig_FeeFlat) isTransactionFactoryConfig_FeeMode() {}

func (*TransactionFactoryConfig_FeeUseEstimate) isTransactionFactoryConfig_FeeMode() {}

type UTXOEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecHash    []byte `protobuf:"bytes,1,opt,name=spec_hash,json=specHash,proto3" json:"spec_hash,omitempty"`
	SrcTx       []byte `protobuf:"bytes,2,opt,name=src_tx,json=srcTx,proto3" json:"src_tx,omitempty"`
	SrcTxOutIdx int32  `protobuf:"varint,3,opt,name=src_tx_out_idx,json=srcTxOutIdx,proto3" json:"src_tx_out_idx,omitempty"`
	Value       int64  `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UTXOEntry) Reset() {
	*x = UTXOEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_util_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UTXOEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UTXOEntry) ProtoMessage() {}

func (x *UTXOEntry) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_util_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UTXOEntry.ProtoReflect.Descriptor instead.
func (*UTXOEntry) Descriptor() ([]byte, []int) {
	return file_protolib_util_proto_rawDescGZIP(), []int{1}
}

func (x *UTXOEntry) GetSpecHash() []byte {
	if x != nil {
		return x.SpecHash
	}
	return nil
}

func (x *UTXOEntry) GetSrcTx() []byte {
	if x != nil {
		return x.SrcTx
	}
	return nil
}

func (x *UTXOEntry) GetSrcTxOutIdx() int32 {
	if x != nil {
		return x.SrcTxOutIdx
	}
	return 0
}

func (x *UTXOEntry) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type TransactionSignResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx              *snowblossom.Transaction `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	AllSigned       bool                     `protobuf:"varint,2,opt,name=all_signed,json=allSigned,proto3" json:"all_signed,omitempty"`
	Fee             int64                    `protobuf:"varint,3,opt,name=fee,proto3" json:"fee,omitempty"`
	SignaturesAdded int32                    `protobuf:"varint,4,opt,name=signatures_added,json=signaturesAdded,proto3" json:"signatures_added,omitempty"`
}

func (x *TransactionSignResult) Reset() {
	*x = TransactionSignResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_util_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionSignResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionSignResult) ProtoMessage() {}

func (x *TransactionSignResult) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_util_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionSignResult.ProtoReflect.Descriptor instead.
func (*TransactionSignResult) Descriptor() ([]byte, []int) {
	return file_protolib_util_proto_rawDescGZIP(), []int{2}
}

func (x *TransactionSignResult) GetTx() *snowblossom.Transaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *TransactionSignResult) GetAllSigned() bool {
	if x != nil {
		return x.AllSigned
	}
	return false
}

func (x *TransactionSignResult) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *TransactionSignResult) GetSignaturesAdded() int32 {
	if x != nil {
		return x.SignaturesAdded
	}
	return 0
}

type TransactionFactoryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxDeprecated    *snowblossom.Transaction   `protobuf:"bytes,1,opt,name=tx_deprecated,json=txDeprecated,proto3" json:"tx_deprecated,omitempty"` // deprecated
	AllSigned       bool                       `protobuf:"varint,2,opt,name=all_signed,json=allSigned,proto3" json:"all_signed,omitempty"`
	Fee             int64                      `protobuf:"varint,3,opt,name=fee,proto3" json:"fee,omitempty"`
	SignaturesAdded int32                      `protobuf:"varint,4,opt,name=signatures_added,json=signaturesAdded,proto3" json:"signatures_added,omitempty"`
	Txs             []*snowblossom.Transaction `protobuf:"bytes,5,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (x *TransactionFactoryResult) Reset() {
	*x = TransactionFactoryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_util_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionFactoryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionFactoryResult) ProtoMessage() {}

func (x *TransactionFactoryResult) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_util_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionFactoryResult.ProtoReflect.Descriptor instead.
func (*TransactionFactoryResult) Descriptor() ([]byte, []int) {
	return file_protolib_util_proto_rawDescGZIP(), []int{3}
}

func (x *TransactionFactoryResult) GetTxDeprecated() *snowblossom.Transaction {
	if x != nil {
		return x.TxDeprecated
	}
	return nil
}

func (x *TransactionFactoryResult) GetAllSigned() bool {
	if x != nil {
		return x.AllSigned
	}
	return false
}

func (x *TransactionFactoryResult) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *TransactionFactoryResult) GetSignaturesAdded() int32 {
	if x != nil {
		return x.SignaturesAdded
	}
	return 0
}

func (x *TransactionFactoryResult) GetTxs() []*snowblossom.Transaction {
	if x != nil {
		return x.Txs
	}
	return nil
}

type AuditLogReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chains []*AuditLogChain `protobuf:"bytes,1,rep,name=chains,proto3" json:"chains,omitempty"`
}

func (x *AuditLogReport) Reset() {
	*x = AuditLogReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_util_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLogReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogReport) ProtoMessage() {}

func (x *AuditLogReport) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_util_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogReport.ProtoReflect.Descriptor instead.
func (*AuditLogReport) Descriptor() ([]byte, []int) {
	return file_protolib_util_proto_rawDescGZIP(), []int{4}
}

func (x *AuditLogReport) GetChains() []*AuditLogChain {
	if x != nil {
		return x.Chains
	}
	return nil
}

type AuditLogChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*AuditLogItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AuditLogChain) Reset() {
	*x = AuditLogChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_util_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLogChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogChain) ProtoMessage() {}

func (x *AuditLogChain) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_util_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogChain.ProtoReflect.Descriptor instead.
func (*AuditLogChain) Descriptor() ([]byte, []int) {
	return file_protolib_util_proto_rawDescGZIP(), []int{5}
}

func (x *AuditLogChain) GetItems() []*AuditLogItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type AuditLogItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash          []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	ConfirmedHeight int32  `protobuf:"varint,2,opt,name=confirmed_height,json=confirmedHeight,proto3" json:"confirmed_height,omitempty"`
	LogMsg          []byte `protobuf:"bytes,3,opt,name=log_msg,json=logMsg,proto3" json:"log_msg,omitempty"`
}

func (x *AuditLogItem) Reset() {
	*x = AuditLogItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_util_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLogItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogItem) ProtoMessage() {}

func (x *AuditLogItem) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_util_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogItem.ProtoReflect.Descriptor instead.
func (*AuditLogItem) Descriptor() ([]byte, []int) {
	return file_protolib_util_proto_rawDescGZIP(), []int{6}
}

func (x *AuditLogItem) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *AuditLogItem) GetConfirmedHeight() int32 {
	if x != nil {
		return x.ConfirmedHeight
	}
	return 0
}

func (x *AuditLogItem) GetLogMsg() []byte {
	if x != nil {
		return x.LogMsg
	}
	return nil
}

type SymmetricKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Keep the key size small by just using an identifier number here
	// rather than something more long winded like AES/CBC/PKCS5PADDING
	// See snowblossom.lib.CipherUtil
	AlgoSet int32  `protobuf:"varint,1,opt,name=algo_set,json=algoSet,proto3" json:"algo_set,omitempty"`
	Key     []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	KeyId   []byte `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"` // Randomly generated key id
}

func (x *SymmetricKey) Reset() {
	*x = SymmetricKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_util_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricKey) ProtoMessage() {}

func (x *SymmetricKey) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_util_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricKey.ProtoReflect.Descriptor instead.
func (*SymmetricKey) Descriptor() ([]byte, []int) {
	return file_protolib_util_proto_rawDescGZIP(), []int{7}
}

func (x *SymmetricKey) GetAlgoSet() int32 {
	if x != nil {
		return x.AlgoSet
	}
	return 0
}

func (x *SymmetricKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SymmetricKey) GetKeyId() []byte {
	if x != nil {
		return x.KeyId
	}
	return nil
}

type Offer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfferMode  Offer_OfferMode           `protobuf:"varint,10,opt,name=offer_mode,json=offerMode,proto3,enum=snowblossom.Offer_OfferMode" json:"offer_mode,omitempty"`
	OfferId    string                    `protobuf:"bytes,11,opt,name=offer_id,json=offerId,proto3" json:"offer_id,omitempty"`
	OfferPrice map[string]*OfferCurrency `protobuf:"bytes,12,rep,name=offer_price,json=offerPrice,proto3" json:"offer_price,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Offer) Reset() {
	*x = Offer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_util_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Offer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offer) ProtoMessage() {}

func (x *Offer) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_util_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offer.ProtoReflect.Descriptor instead.
func (*Offer) Descriptor() ([]byte, []int) {
	return file_protolib_util_proto_rawDescGZIP(), []int{8}
}

func (x *Offer) GetOfferMode() Offer_OfferMode {
	if x != nil {
		return x.OfferMode
	}
	return Offer_UNDEFINED
}

func (x *Offer) GetOfferId() string {
	if x != nil {
		return x.OfferId
	}
	return ""
}

func (x *Offer) GetOfferPrice() map[string]*OfferCurrency {
	if x != nil {
		return x.OfferPrice
	}
	return nil
}

type OfferCurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price   float64 `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
	Address string  `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *OfferCurrency) Reset() {
	*x = OfferCurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_util_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferCurrency) ProtoMessage() {}

func (x *OfferCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_util_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferCurrency.ProtoReflect.Descriptor instead.
func (*OfferCurrency) Descriptor() ([]byte, []int) {
	return file_protolib_util_proto_rawDescGZIP(), []int{9}
}

func (x *OfferCurrency) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OfferCurrency) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// To be stuffed in extra field of transaction
type OfferAcceptance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfferId string `protobuf:"bytes,1,opt,name=offer_id,json=offerId,proto3" json:"offer_id,omitempty"` // Identifier of the offer accepted
	// Types that are assignable to Z:
	//	*OfferAcceptance_ForAddressSpec
	//	*OfferAcceptance_ForAddressSpecHash
	Z                  isOfferAcceptance_Z `protobuf_oneof:"z"`
	RefundAddrSpecHash []byte              `protobuf:"bytes,5,opt,name=refund_addr_spec_hash,json=refundAddrSpecHash,proto3" json:"refund_addr_spec_hash,omitempty"`
}

func (x *OfferAcceptance) Reset() {
	*x = OfferAcceptance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_util_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferAcceptance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferAcceptance) ProtoMessage() {}

func (x *OfferAcceptance) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_util_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferAcceptance.ProtoReflect.Descriptor instead.
func (*OfferAcceptance) Descriptor() ([]byte, []int) {
	return file_protolib_util_proto_rawDescGZIP(), []int{10}
}

func (x *OfferAcceptance) GetOfferId() string {
	if x != nil {
		return x.OfferId
	}
	return ""
}

func (m *OfferAcceptance) GetZ() isOfferAcceptance_Z {
	if m != nil {
		return m.Z
	}
	return nil
}

func (x *OfferAcceptance) GetForAddressSpec() *snowblossom.AddressSpec {
	if x, ok := x.GetZ().(*OfferAcceptance_ForAddressSpec); ok {
		return x.ForAddressSpec
	}
	return nil
}

func (x *OfferAcceptance) GetForAddressSpecHash() []byte {
	if x, ok := x.GetZ().(*OfferAcceptance_ForAddressSpecHash); ok {
		return x.ForAddressSpecHash
	}
	return nil
}

func (x *OfferAcceptance) GetRefundAddrSpecHash() []byte {
	if x != nil {
		return x.RefundAddrSpecHash
	}
	return nil
}

type isOfferAcceptance_Z interface {
	isOfferAcceptance_Z()
}

type OfferAcceptance_ForAddressSpec struct {
	// That that are doing PKI to sign messages for the recipient will need the full spec
	ForAddressSpec *snowblossom.AddressSpec `protobuf:"bytes,2,opt,name=for_address_spec,json=forAddressSpec,proto3,oneof"` // address spec of the beneficiary of the offer (if applicable)
}

type OfferAcceptance_ForAddressSpecHash struct {
	// Things that just need to validate signatures only need the spec hash
	ForAddressSpecHash []byte `protobuf:"bytes,3,opt,name=for_address_spec_hash,json=forAddressSpecHash,proto3,oneof"`
}

func (*OfferAcceptance_ForAddressSpec) isOfferAcceptance_Z() {}

func (*OfferAcceptance_ForAddressSpecHash) isOfferAcceptance_Z() {}

var File_protolib_util_proto protoreflect.FileDescriptor

var file_protolib_util_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x69, 0x62, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73,
	0x6f, 0x6d, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x69, 0x62, 0x2f, 0x73, 0x6e, 0x6f,
	0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc,
	0x06, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x07, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x16, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x72, 0x65, 0x73, 0x68, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x17, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x11,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x65, 0x6e, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x19, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x68, 0x65, 0x6e, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x12, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62,
	0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x55, 0x54, 0x58, 0x4f, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f,
	0x66, 0x6c, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x07, 0x66, 0x65,
	0x65, 0x46, 0x6c, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x65, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x02, 0x52, 0x0e, 0x66, 0x65, 0x65, 0x55, 0x73, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x61, 0x6c, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x7a, 0x0a,
	0x09, 0x55, 0x54, 0x58, 0x4f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73,
	0x70, 0x65, 0x63, 0x48, 0x61, 0x73, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x74,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x72, 0x63, 0x54, 0x78, 0x12, 0x23,
	0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x54, 0x78, 0x4f, 0x75, 0x74,
	0x49, 0x64, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x15, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x74, 0x78, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x64,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x18, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x64, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x78, 0x44, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x65,
	0x64, 0x12, 0x2a, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x78, 0x73, 0x22, 0x44, 0x0a,
	0x0e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x32, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x22, 0x40, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f,
	0x6d, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x6b, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x67,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x4d,
	0x73, 0x67, 0x22, 0x52, 0x0a, 0x0c, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x6c, 0x67, 0x6f, 0x53, 0x65, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0xaf, 0x02, 0x0a, 0x05, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x3b, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73,
	0x6f, 0x6d, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x1a, 0x59, 0x0a,
	0x0f, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2e, 0x0a, 0x09, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x4f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x22, 0x3f, 0x0a, 0x0d, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x0f, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x0e,
	0x66, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x33,
	0x0a, 0x15, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x12, 0x66, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x12, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x48, 0x61, 0x73, 0x68, 0x42, 0x03, 0x0a, 0x01, 0x7a, 0x42, 0x56, 0x0a, 0x16, 0x73,
	0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x14, 0x53, 0x6e, 0x6f, 0x77, 0x42, 0x6c, 0x6f, 0x73, 0x73,
	0x6f, 0x6d, 0x55, 0x74, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x24, 0x67,
	0x6f, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x75,
	0x74, 0x69, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protolib_util_proto_rawDescOnce sync.Once
	file_protolib_util_proto_rawDescData = file_protolib_util_proto_rawDesc
)

func file_protolib_util_proto_rawDescGZIP() []byte {
	file_protolib_util_proto_rawDescOnce.Do(func() {
		file_protolib_util_proto_rawDescData = protoimpl.X.CompressGZIP(file_protolib_util_proto_rawDescData)
	})
	return file_protolib_util_proto_rawDescData
}

var file_protolib_util_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protolib_util_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_protolib_util_proto_goTypes = []interface{}{
	(Offer_OfferMode)(0),                  // 0: snowblossom.Offer.OfferMode
	(*TransactionFactoryConfig)(nil),      // 1: snowblossom.TransactionFactoryConfig
	(*UTXOEntry)(nil),                     // 2: snowblossom.UTXOEntry
	(*TransactionSignResult)(nil),         // 3: snowblossom.TransactionSignResult
	(*TransactionFactoryResult)(nil),      // 4: snowblossom.TransactionFactoryResult
	(*AuditLogReport)(nil),                // 5: snowblossom.AuditLogReport
	(*AuditLogChain)(nil),                 // 6: snowblossom.AuditLogChain
	(*AuditLogItem)(nil),                  // 7: snowblossom.AuditLogItem
	(*SymmetricKey)(nil),                  // 8: snowblossom.SymmetricKey
	(*Offer)(nil),                         // 9: snowblossom.Offer
	(*OfferCurrency)(nil),                 // 10: snowblossom.OfferCurrency
	(*OfferAcceptance)(nil),               // 11: snowblossom.OfferAcceptance
	nil,                                   // 12: snowblossom.Offer.OfferPriceEntry
	(*snowblossom.TransactionOutput)(nil), // 13: snowblossom.TransactionOutput
	(*snowblossom.Transaction)(nil),       // 14: snowblossom.Transaction
	(*snowblossom.AddressSpec)(nil),       // 15: snowblossom.AddressSpec
}
var file_protolib_util_proto_depIdxs = []int32{
	13, // 0: snowblossom.TransactionFactoryConfig.outputs:type_name -> snowblossom.TransactionOutput
	2,  // 1: snowblossom.TransactionFactoryConfig.inputs:type_name -> snowblossom.UTXOEntry
	14, // 2: snowblossom.TransactionSignResult.tx:type_name -> snowblossom.Transaction
	14, // 3: snowblossom.TransactionFactoryResult.tx_deprecated:type_name -> snowblossom.Transaction
	14, // 4: snowblossom.TransactionFactoryResult.txs:type_name -> snowblossom.Transaction
	6,  // 5: snowblossom.AuditLogReport.chains:type_name -> snowblossom.AuditLogChain
	7,  // 6: snowblossom.AuditLogChain.items:type_name -> snowblossom.AuditLogItem
	0,  // 7: snowblossom.Offer.offer_mode:type_name -> snowblossom.Offer.OfferMode
	12, // 8: snowblossom.Offer.offer_price:type_name -> snowblossom.Offer.OfferPriceEntry
	15, // 9: snowblossom.OfferAcceptance.for_address_spec:type_name -> snowblossom.AddressSpec
	10, // 10: snowblossom.Offer.OfferPriceEntry.value:type_name -> snowblossom.OfferCurrency
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_protolib_util_proto_init() }
func file_protolib_util_proto_init() {
	if File_protolib_util_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protolib_util_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionFactoryConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_util_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UTXOEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_util_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionSignResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_util_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionFactoryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_util_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLogReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_util_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLogChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_util_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLogItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_util_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_util_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Offer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_util_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferCurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_util_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferAcceptance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protolib_util_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*TransactionFactoryConfig_ChangeRandomFromWallet)(nil),
		(*TransactionFactoryConfig_ChangeFreshAddress)(nil),
		(*TransactionFactoryConfig_ChangeSpecificAddresses)(nil),
		(*TransactionFactoryConfig_InputSpecificList)(nil),
		(*TransactionFactoryConfig_InputConfirmedThenPending)(nil),
		(*TransactionFactoryConfig_InputConfirmedOnly)(nil),
		(*TransactionFactoryConfig_FeeFlat)(nil),
		(*TransactionFactoryConfig_FeeUseEstimate)(nil),
	}
	file_protolib_util_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*OfferAcceptance_ForAddressSpec)(nil),
		(*OfferAcceptance_ForAddressSpecHash)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protolib_util_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protolib_util_proto_goTypes,
		DependencyIndexes: file_protolib_util_proto_depIdxs,
		EnumInfos:         file_protolib_util_proto_enumTypes,
		MessageInfos:      file_protolib_util_proto_msgTypes,
	}.Build()
	File_protolib_util_proto = out.File
	file_protolib_util_proto_rawDesc = nil
	file_protolib_util_proto_goTypes = nil
	file_protolib_util_proto_depIdxs = nil
}
