// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package snowblossom

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PeerServiceClient is the client API for PeerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeerServiceClient interface {
	SubscribePeering(ctx context.Context, opts ...grpc.CallOption) (PeerService_SubscribePeeringClient, error)
}

type peerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerServiceClient(cc grpc.ClientConnInterface) PeerServiceClient {
	return &peerServiceClient{cc}
}

func (c *peerServiceClient) SubscribePeering(ctx context.Context, opts ...grpc.CallOption) (PeerService_SubscribePeeringClient, error) {
	stream, err := c.cc.NewStream(ctx, &PeerService_ServiceDesc.Streams[0], "/snowblossom.PeerService/SubscribePeering", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerServiceSubscribePeeringClient{stream}
	return x, nil
}

type PeerService_SubscribePeeringClient interface {
	Send(*PeerMessage) error
	Recv() (*PeerMessage, error)
	grpc.ClientStream
}

type peerServiceSubscribePeeringClient struct {
	grpc.ClientStream
}

func (x *peerServiceSubscribePeeringClient) Send(m *PeerMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *peerServiceSubscribePeeringClient) Recv() (*PeerMessage, error) {
	m := new(PeerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeerServiceServer is the server API for PeerService service.
// All implementations must embed UnimplementedPeerServiceServer
// for forward compatibility
type PeerServiceServer interface {
	SubscribePeering(PeerService_SubscribePeeringServer) error
	mustEmbedUnimplementedPeerServiceServer()
}

// UnimplementedPeerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPeerServiceServer struct {
}

func (UnimplementedPeerServiceServer) SubscribePeering(PeerService_SubscribePeeringServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribePeering not implemented")
}
func (UnimplementedPeerServiceServer) mustEmbedUnimplementedPeerServiceServer() {}

// UnsafePeerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeerServiceServer will
// result in compilation errors.
type UnsafePeerServiceServer interface {
	mustEmbedUnimplementedPeerServiceServer()
}

func RegisterPeerServiceServer(s grpc.ServiceRegistrar, srv PeerServiceServer) {
	s.RegisterService(&PeerService_ServiceDesc, srv)
}

func _PeerService_SubscribePeering_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PeerServiceServer).SubscribePeering(&peerServiceSubscribePeeringServer{stream})
}

type PeerService_SubscribePeeringServer interface {
	Send(*PeerMessage) error
	Recv() (*PeerMessage, error)
	grpc.ServerStream
}

type peerServiceSubscribePeeringServer struct {
	grpc.ServerStream
}

func (x *peerServiceSubscribePeeringServer) Send(m *PeerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *peerServiceSubscribePeeringServer) Recv() (*PeerMessage, error) {
	m := new(PeerMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeerService_ServiceDesc is the grpc.ServiceDesc for PeerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snowblossom.PeerService",
	HandlerType: (*PeerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribePeering",
			Handler:       _PeerService_SubscribePeering_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protolib/snowblossom.proto",
}

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// Subscribe to getting block templates to mine with
	SubscribeBlockTemplate(ctx context.Context, in *SubscribeBlockTemplateRequest, opts ...grpc.CallOption) (UserService_SubscribeBlockTemplateClient, error)
	// Subscribe to getting block templates to mine with,
	// but can use an RPC stream to update the template request
	SubscribeBlockTemplateStream(ctx context.Context, opts ...grpc.CallOption) (UserService_SubscribeBlockTemplateStreamClient, error)
	SubscribeBlockTemplateStreamExtended(ctx context.Context, opts ...grpc.CallOption) (UserService_SubscribeBlockTemplateStreamExtendedClient, error)
	SubmitBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*SubmitReply, error)
	SubmitTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*SubmitReply, error)
	GetUTXONode(ctx context.Context, in *GetUTXONodeRequest, opts ...grpc.CallOption) (*GetUTXONodeReply, error)
	GetUTXONodeMulti(ctx context.Context, in *GetUTXONodeRequest, opts ...grpc.CallOption) (*GetUTXOReplyList, error)
	GetMempoolTransactionList(ctx context.Context, in *RequestAddress, opts ...grpc.CallOption) (*TransactionHashList, error)
	GetMempoolTransactionMap(ctx context.Context, in *RequestAddress, opts ...grpc.CallOption) (*TransactionShardMap, error)
	GetAddressHistory(ctx context.Context, in *RequestAddress, opts ...grpc.CallOption) (*HistoryList, error)
	GetNodeStatus(ctx context.Context, in *NullRequest, opts ...grpc.CallOption) (*NodeStatus, error)
	GetBlock(ctx context.Context, in *RequestBlock, opts ...grpc.CallOption) (*Block, error)
	GetBlockSummary(ctx context.Context, in *RequestBlockSummary, opts ...grpc.CallOption) (*BlockSummary, error)
	GetTransaction(ctx context.Context, in *RequestTransaction, opts ...grpc.CallOption) (*Transaction, error)
	GetTransactionStatus(ctx context.Context, in *RequestTransaction, opts ...grpc.CallOption) (*TransactionStatus, error)
	GetBlockHeader(ctx context.Context, in *RequestBlockHeader, opts ...grpc.CallOption) (*BlockHeader, error)
	GetFeeEstimate(ctx context.Context, in *NullRequest, opts ...grpc.CallOption) (*FeeEstimate, error)
	GetFBOList(ctx context.Context, in *RequestAddress, opts ...grpc.CallOption) (*TxOutList, error)
	GetIDList(ctx context.Context, in *RequestNameID, opts ...grpc.CallOption) (*TxOutList, error)
	GetPeerList(ctx context.Context, in *PeerListRequest, opts ...grpc.CallOption) (*PeerList, error)
	SubscribeAddressUpdates(ctx context.Context, in *RequestAddress, opts ...grpc.CallOption) (UserService_SubscribeAddressUpdatesClient, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) SubscribeBlockTemplate(ctx context.Context, in *SubscribeBlockTemplateRequest, opts ...grpc.CallOption) (UserService_SubscribeBlockTemplateClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], "/snowblossom.UserService/SubscribeBlockTemplate", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceSubscribeBlockTemplateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_SubscribeBlockTemplateClient interface {
	Recv() (*Block, error)
	grpc.ClientStream
}

type userServiceSubscribeBlockTemplateClient struct {
	grpc.ClientStream
}

func (x *userServiceSubscribeBlockTemplateClient) Recv() (*Block, error) {
	m := new(Block)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) SubscribeBlockTemplateStream(ctx context.Context, opts ...grpc.CallOption) (UserService_SubscribeBlockTemplateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[1], "/snowblossom.UserService/SubscribeBlockTemplateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceSubscribeBlockTemplateStreamClient{stream}
	return x, nil
}

type UserService_SubscribeBlockTemplateStreamClient interface {
	Send(*SubscribeBlockTemplateRequest) error
	Recv() (*Block, error)
	grpc.ClientStream
}

type userServiceSubscribeBlockTemplateStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceSubscribeBlockTemplateStreamClient) Send(m *SubscribeBlockTemplateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceSubscribeBlockTemplateStreamClient) Recv() (*Block, error) {
	m := new(Block)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) SubscribeBlockTemplateStreamExtended(ctx context.Context, opts ...grpc.CallOption) (UserService_SubscribeBlockTemplateStreamExtendedClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[2], "/snowblossom.UserService/SubscribeBlockTemplateStreamExtended", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceSubscribeBlockTemplateStreamExtendedClient{stream}
	return x, nil
}

type UserService_SubscribeBlockTemplateStreamExtendedClient interface {
	Send(*SubscribeBlockTemplateRequest) error
	Recv() (*BlockTemplate, error)
	grpc.ClientStream
}

type userServiceSubscribeBlockTemplateStreamExtendedClient struct {
	grpc.ClientStream
}

func (x *userServiceSubscribeBlockTemplateStreamExtendedClient) Send(m *SubscribeBlockTemplateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceSubscribeBlockTemplateStreamExtendedClient) Recv() (*BlockTemplate, error) {
	m := new(BlockTemplate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) SubmitBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*SubmitReply, error) {
	out := new(SubmitReply)
	err := c.cc.Invoke(ctx, "/snowblossom.UserService/SubmitBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SubmitTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*SubmitReply, error) {
	out := new(SubmitReply)
	err := c.cc.Invoke(ctx, "/snowblossom.UserService/SubmitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUTXONode(ctx context.Context, in *GetUTXONodeRequest, opts ...grpc.CallOption) (*GetUTXONodeReply, error) {
	out := new(GetUTXONodeReply)
	err := c.cc.Invoke(ctx, "/snowblossom.UserService/GetUTXONode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUTXONodeMulti(ctx context.Context, in *GetUTXONodeRequest, opts ...grpc.CallOption) (*GetUTXOReplyList, error) {
	out := new(GetUTXOReplyList)
	err := c.cc.Invoke(ctx, "/snowblossom.UserService/GetUTXONodeMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetMempoolTransactionList(ctx context.Context, in *RequestAddress, opts ...grpc.CallOption) (*TransactionHashList, error) {
	out := new(TransactionHashList)
	err := c.cc.Invoke(ctx, "/snowblossom.UserService/GetMempoolTransactionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetMempoolTransactionMap(ctx context.Context, in *RequestAddress, opts ...grpc.CallOption) (*TransactionShardMap, error) {
	out := new(TransactionShardMap)
	err := c.cc.Invoke(ctx, "/snowblossom.UserService/GetMempoolTransactionMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAddressHistory(ctx context.Context, in *RequestAddress, opts ...grpc.CallOption) (*HistoryList, error) {
	out := new(HistoryList)
	err := c.cc.Invoke(ctx, "/snowblossom.UserService/GetAddressHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetNodeStatus(ctx context.Context, in *NullRequest, opts ...grpc.CallOption) (*NodeStatus, error) {
	out := new(NodeStatus)
	err := c.cc.Invoke(ctx, "/snowblossom.UserService/GetNodeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetBlock(ctx context.Context, in *RequestBlock, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/snowblossom.UserService/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetBlockSummary(ctx context.Context, in *RequestBlockSummary, opts ...grpc.CallOption) (*BlockSummary, error) {
	out := new(BlockSummary)
	err := c.cc.Invoke(ctx, "/snowblossom.UserService/getBlockSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetTransaction(ctx context.Context, in *RequestTransaction, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/snowblossom.UserService/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetTransactionStatus(ctx context.Context, in *RequestTransaction, opts ...grpc.CallOption) (*TransactionStatus, error) {
	out := new(TransactionStatus)
	err := c.cc.Invoke(ctx, "/snowblossom.UserService/GetTransactionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetBlockHeader(ctx context.Context, in *RequestBlockHeader, opts ...grpc.CallOption) (*BlockHeader, error) {
	out := new(BlockHeader)
	err := c.cc.Invoke(ctx, "/snowblossom.UserService/GetBlockHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetFeeEstimate(ctx context.Context, in *NullRequest, opts ...grpc.CallOption) (*FeeEstimate, error) {
	out := new(FeeEstimate)
	err := c.cc.Invoke(ctx, "/snowblossom.UserService/GetFeeEstimate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetFBOList(ctx context.Context, in *RequestAddress, opts ...grpc.CallOption) (*TxOutList, error) {
	out := new(TxOutList)
	err := c.cc.Invoke(ctx, "/snowblossom.UserService/GetFBOList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetIDList(ctx context.Context, in *RequestNameID, opts ...grpc.CallOption) (*TxOutList, error) {
	out := new(TxOutList)
	err := c.cc.Invoke(ctx, "/snowblossom.UserService/GetIDList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetPeerList(ctx context.Context, in *PeerListRequest, opts ...grpc.CallOption) (*PeerList, error) {
	out := new(PeerList)
	err := c.cc.Invoke(ctx, "/snowblossom.UserService/GetPeerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SubscribeAddressUpdates(ctx context.Context, in *RequestAddress, opts ...grpc.CallOption) (UserService_SubscribeAddressUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[3], "/snowblossom.UserService/SubscribeAddressUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceSubscribeAddressUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_SubscribeAddressUpdatesClient interface {
	Recv() (*AddressUpdate, error)
	grpc.ClientStream
}

type userServiceSubscribeAddressUpdatesClient struct {
	grpc.ClientStream
}

func (x *userServiceSubscribeAddressUpdatesClient) Recv() (*AddressUpdate, error) {
	m := new(AddressUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// Subscribe to getting block templates to mine with
	SubscribeBlockTemplate(*SubscribeBlockTemplateRequest, UserService_SubscribeBlockTemplateServer) error
	// Subscribe to getting block templates to mine with,
	// but can use an RPC stream to update the template request
	SubscribeBlockTemplateStream(UserService_SubscribeBlockTemplateStreamServer) error
	SubscribeBlockTemplateStreamExtended(UserService_SubscribeBlockTemplateStreamExtendedServer) error
	SubmitBlock(context.Context, *Block) (*SubmitReply, error)
	SubmitTransaction(context.Context, *Transaction) (*SubmitReply, error)
	GetUTXONode(context.Context, *GetUTXONodeRequest) (*GetUTXONodeReply, error)
	GetUTXONodeMulti(context.Context, *GetUTXONodeRequest) (*GetUTXOReplyList, error)
	GetMempoolTransactionList(context.Context, *RequestAddress) (*TransactionHashList, error)
	GetMempoolTransactionMap(context.Context, *RequestAddress) (*TransactionShardMap, error)
	GetAddressHistory(context.Context, *RequestAddress) (*HistoryList, error)
	GetNodeStatus(context.Context, *NullRequest) (*NodeStatus, error)
	GetBlock(context.Context, *RequestBlock) (*Block, error)
	GetBlockSummary(context.Context, *RequestBlockSummary) (*BlockSummary, error)
	GetTransaction(context.Context, *RequestTransaction) (*Transaction, error)
	GetTransactionStatus(context.Context, *RequestTransaction) (*TransactionStatus, error)
	GetBlockHeader(context.Context, *RequestBlockHeader) (*BlockHeader, error)
	GetFeeEstimate(context.Context, *NullRequest) (*FeeEstimate, error)
	GetFBOList(context.Context, *RequestAddress) (*TxOutList, error)
	GetIDList(context.Context, *RequestNameID) (*TxOutList, error)
	GetPeerList(context.Context, *PeerListRequest) (*PeerList, error)
	SubscribeAddressUpdates(*RequestAddress, UserService_SubscribeAddressUpdatesServer) error
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) SubscribeBlockTemplate(*SubscribeBlockTemplateRequest, UserService_SubscribeBlockTemplateServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBlockTemplate not implemented")
}
func (UnimplementedUserServiceServer) SubscribeBlockTemplateStream(UserService_SubscribeBlockTemplateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBlockTemplateStream not implemented")
}
func (UnimplementedUserServiceServer) SubscribeBlockTemplateStreamExtended(UserService_SubscribeBlockTemplateStreamExtendedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBlockTemplateStreamExtended not implemented")
}
func (UnimplementedUserServiceServer) SubmitBlock(context.Context, *Block) (*SubmitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBlock not implemented")
}
func (UnimplementedUserServiceServer) SubmitTransaction(context.Context, *Transaction) (*SubmitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransaction not implemented")
}
func (UnimplementedUserServiceServer) GetUTXONode(context.Context, *GetUTXONodeRequest) (*GetUTXONodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUTXONode not implemented")
}
func (UnimplementedUserServiceServer) GetUTXONodeMulti(context.Context, *GetUTXONodeRequest) (*GetUTXOReplyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUTXONodeMulti not implemented")
}
func (UnimplementedUserServiceServer) GetMempoolTransactionList(context.Context, *RequestAddress) (*TransactionHashList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMempoolTransactionList not implemented")
}
func (UnimplementedUserServiceServer) GetMempoolTransactionMap(context.Context, *RequestAddress) (*TransactionShardMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMempoolTransactionMap not implemented")
}
func (UnimplementedUserServiceServer) GetAddressHistory(context.Context, *RequestAddress) (*HistoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressHistory not implemented")
}
func (UnimplementedUserServiceServer) GetNodeStatus(context.Context, *NullRequest) (*NodeStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeStatus not implemented")
}
func (UnimplementedUserServiceServer) GetBlock(context.Context, *RequestBlock) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedUserServiceServer) GetBlockSummary(context.Context, *RequestBlockSummary) (*BlockSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockSummary not implemented")
}
func (UnimplementedUserServiceServer) GetTransaction(context.Context, *RequestTransaction) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedUserServiceServer) GetTransactionStatus(context.Context, *RequestTransaction) (*TransactionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionStatus not implemented")
}
func (UnimplementedUserServiceServer) GetBlockHeader(context.Context, *RequestBlockHeader) (*BlockHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeader not implemented")
}
func (UnimplementedUserServiceServer) GetFeeEstimate(context.Context, *NullRequest) (*FeeEstimate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeeEstimate not implemented")
}
func (UnimplementedUserServiceServer) GetFBOList(context.Context, *RequestAddress) (*TxOutList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFBOList not implemented")
}
func (UnimplementedUserServiceServer) GetIDList(context.Context, *RequestNameID) (*TxOutList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIDList not implemented")
}
func (UnimplementedUserServiceServer) GetPeerList(context.Context, *PeerListRequest) (*PeerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerList not implemented")
}
func (UnimplementedUserServiceServer) SubscribeAddressUpdates(*RequestAddress, UserService_SubscribeAddressUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeAddressUpdates not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_SubscribeBlockTemplate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeBlockTemplateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).SubscribeBlockTemplate(m, &userServiceSubscribeBlockTemplateServer{stream})
}

type UserService_SubscribeBlockTemplateServer interface {
	Send(*Block) error
	grpc.ServerStream
}

type userServiceSubscribeBlockTemplateServer struct {
	grpc.ServerStream
}

func (x *userServiceSubscribeBlockTemplateServer) Send(m *Block) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_SubscribeBlockTemplateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).SubscribeBlockTemplateStream(&userServiceSubscribeBlockTemplateStreamServer{stream})
}

type UserService_SubscribeBlockTemplateStreamServer interface {
	Send(*Block) error
	Recv() (*SubscribeBlockTemplateRequest, error)
	grpc.ServerStream
}

type userServiceSubscribeBlockTemplateStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceSubscribeBlockTemplateStreamServer) Send(m *Block) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceSubscribeBlockTemplateStreamServer) Recv() (*SubscribeBlockTemplateRequest, error) {
	m := new(SubscribeBlockTemplateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_SubscribeBlockTemplateStreamExtended_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).SubscribeBlockTemplateStreamExtended(&userServiceSubscribeBlockTemplateStreamExtendedServer{stream})
}

type UserService_SubscribeBlockTemplateStreamExtendedServer interface {
	Send(*BlockTemplate) error
	Recv() (*SubscribeBlockTemplateRequest, error)
	grpc.ServerStream
}

type userServiceSubscribeBlockTemplateStreamExtendedServer struct {
	grpc.ServerStream
}

func (x *userServiceSubscribeBlockTemplateStreamExtendedServer) Send(m *BlockTemplate) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceSubscribeBlockTemplateStreamExtendedServer) Recv() (*SubscribeBlockTemplateRequest, error) {
	m := new(SubscribeBlockTemplateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_SubmitBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Block)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SubmitBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowblossom.UserService/SubmitBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SubmitBlock(ctx, req.(*Block))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowblossom.UserService/SubmitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SubmitTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUTXONode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUTXONodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUTXONode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowblossom.UserService/GetUTXONode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUTXONode(ctx, req.(*GetUTXONodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUTXONodeMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUTXONodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUTXONodeMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowblossom.UserService/GetUTXONodeMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUTXONodeMulti(ctx, req.(*GetUTXONodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetMempoolTransactionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetMempoolTransactionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowblossom.UserService/GetMempoolTransactionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetMempoolTransactionList(ctx, req.(*RequestAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetMempoolTransactionMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetMempoolTransactionMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowblossom.UserService/GetMempoolTransactionMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetMempoolTransactionMap(ctx, req.(*RequestAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAddressHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAddressHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowblossom.UserService/GetAddressHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAddressHistory(ctx, req.(*RequestAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetNodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetNodeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowblossom.UserService/GetNodeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetNodeStatus(ctx, req.(*NullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowblossom.UserService/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetBlock(ctx, req.(*RequestBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetBlockSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBlockSummary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetBlockSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowblossom.UserService/getBlockSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetBlockSummary(ctx, req.(*RequestBlockSummary))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowblossom.UserService/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetTransaction(ctx, req.(*RequestTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetTransactionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetTransactionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowblossom.UserService/GetTransactionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetTransactionStatus(ctx, req.(*RequestTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBlockHeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetBlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowblossom.UserService/GetBlockHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetBlockHeader(ctx, req.(*RequestBlockHeader))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetFeeEstimate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetFeeEstimate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowblossom.UserService/GetFeeEstimate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetFeeEstimate(ctx, req.(*NullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetFBOList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetFBOList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowblossom.UserService/GetFBOList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetFBOList(ctx, req.(*RequestAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetIDList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNameID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetIDList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowblossom.UserService/GetIDList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetIDList(ctx, req.(*RequestNameID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetPeerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetPeerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowblossom.UserService/GetPeerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetPeerList(ctx, req.(*PeerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SubscribeAddressUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestAddress)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).SubscribeAddressUpdates(m, &userServiceSubscribeAddressUpdatesServer{stream})
}

type UserService_SubscribeAddressUpdatesServer interface {
	Send(*AddressUpdate) error
	grpc.ServerStream
}

type userServiceSubscribeAddressUpdatesServer struct {
	grpc.ServerStream
}

func (x *userServiceSubscribeAddressUpdatesServer) Send(m *AddressUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snowblossom.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitBlock",
			Handler:    _UserService_SubmitBlock_Handler,
		},
		{
			MethodName: "SubmitTransaction",
			Handler:    _UserService_SubmitTransaction_Handler,
		},
		{
			MethodName: "GetUTXONode",
			Handler:    _UserService_GetUTXONode_Handler,
		},
		{
			MethodName: "GetUTXONodeMulti",
			Handler:    _UserService_GetUTXONodeMulti_Handler,
		},
		{
			MethodName: "GetMempoolTransactionList",
			Handler:    _UserService_GetMempoolTransactionList_Handler,
		},
		{
			MethodName: "GetMempoolTransactionMap",
			Handler:    _UserService_GetMempoolTransactionMap_Handler,
		},
		{
			MethodName: "GetAddressHistory",
			Handler:    _UserService_GetAddressHistory_Handler,
		},
		{
			MethodName: "GetNodeStatus",
			Handler:    _UserService_GetNodeStatus_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _UserService_GetBlock_Handler,
		},
		{
			MethodName: "getBlockSummary",
			Handler:    _UserService_GetBlockSummary_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _UserService_GetTransaction_Handler,
		},
		{
			MethodName: "GetTransactionStatus",
			Handler:    _UserService_GetTransactionStatus_Handler,
		},
		{
			MethodName: "GetBlockHeader",
			Handler:    _UserService_GetBlockHeader_Handler,
		},
		{
			MethodName: "GetFeeEstimate",
			Handler:    _UserService_GetFeeEstimate_Handler,
		},
		{
			MethodName: "GetFBOList",
			Handler:    _UserService_GetFBOList_Handler,
		},
		{
			MethodName: "GetIDList",
			Handler:    _UserService_GetIDList_Handler,
		},
		{
			MethodName: "GetPeerList",
			Handler:    _UserService_GetPeerList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeBlockTemplate",
			Handler:       _UserService_SubscribeBlockTemplate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBlockTemplateStream",
			Handler:       _UserService_SubscribeBlockTemplateStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeBlockTemplateStreamExtended",
			Handler:       _UserService_SubscribeBlockTemplateStreamExtended_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeAddressUpdates",
			Handler:       _UserService_SubscribeAddressUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protolib/snowblossom.proto",
}
