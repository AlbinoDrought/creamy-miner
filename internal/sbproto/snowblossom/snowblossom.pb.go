// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: protolib/snowblossom.proto

package snowblossom

import (
	trie "go.snowblossom/internal/sbproto/trie"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PeerInfo_ConnectionType int32

const (
	PeerInfo_GRPC_TCP PeerInfo_ConnectionType = 0
	PeerInfo_GRPC_TLS PeerInfo_ConnectionType = 1
)

// Enum value maps for PeerInfo_ConnectionType.
var (
	PeerInfo_ConnectionType_name = map[int32]string{
		0: "GRPC_TCP",
		1: "GRPC_TLS",
	}
	PeerInfo_ConnectionType_value = map[string]int32{
		"GRPC_TCP": 0,
		"GRPC_TLS": 1,
	}
)

func (x PeerInfo_ConnectionType) Enum() *PeerInfo_ConnectionType {
	p := new(PeerInfo_ConnectionType)
	*p = x
	return p
}

func (x PeerInfo_ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerInfo_ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_protolib_snowblossom_proto_enumTypes[0].Descriptor()
}

func (PeerInfo_ConnectionType) Type() protoreflect.EnumType {
	return &file_protolib_snowblossom_proto_enumTypes[0]
}

func (x PeerInfo_ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeerInfo_ConnectionType.Descriptor instead.
func (PeerInfo_ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{24, 0}
}

type RequestNameID_IdType int32

const (
	RequestNameID_USERNAME    RequestNameID_IdType = 0
	RequestNameID_CHANNELNAME RequestNameID_IdType = 1
)

// Enum value maps for RequestNameID_IdType.
var (
	RequestNameID_IdType_name = map[int32]string{
		0: "USERNAME",
		1: "CHANNELNAME",
	}
	RequestNameID_IdType_value = map[string]int32{
		"USERNAME":    0,
		"CHANNELNAME": 1,
	}
)

func (x RequestNameID_IdType) Enum() *RequestNameID_IdType {
	p := new(RequestNameID_IdType)
	*p = x
	return p
}

func (x RequestNameID_IdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestNameID_IdType) Descriptor() protoreflect.EnumDescriptor {
	return file_protolib_snowblossom_proto_enumTypes[1].Descriptor()
}

func (RequestNameID_IdType) Type() protoreflect.EnumType {
	return &file_protolib_snowblossom_proto_enumTypes[1]
}

func (x RequestNameID_IdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestNameID_IdType.Descriptor instead.
func (RequestNameID_IdType) EnumDescriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{45, 0}
}

// Block hash = mix of all the things in the block header
type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *BlockHeader   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Transactions []*Transaction `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
	// Must be in order of asc(shard_id, block height)
	ImportedBlocks []*ImportedBlock `protobuf:"bytes,3,rep,name=imported_blocks,json=importedBlocks,proto3" json:"imported_blocks,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{0}
}

func (x *Block) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Block) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *Block) GetImportedBlocks() []*ImportedBlock {
	if x != nil {
		return x.ImportedBlocks
	}
	return nil
}

type ImportedBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *BlockHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// As we might be including inherited parent blocks
	// we might be bring in more than one list of outputs
	// Map of shard id (that we are importing) to list of outputs
	ImportOutputs map[int32]*ImportedOutputList `protobuf:"bytes,2,rep,name=import_outputs,json=importOutputs,proto3" json:"import_outputs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ImportedBlock) Reset() {
	*x = ImportedBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportedBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportedBlock) ProtoMessage() {}

func (x *ImportedBlock) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportedBlock.ProtoReflect.Descriptor instead.
func (*ImportedBlock) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{1}
}

func (x *ImportedBlock) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ImportedBlock) GetImportOutputs() map[int32]*ImportedOutputList {
	if x != nil {
		return x.ImportOutputs
	}
	return nil
}

type ImportedOutputList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Might need to send these as ByteStrings
	// for encoding reasons
	TxOuts []*ImportedOutput `protobuf:"bytes,2,rep,name=tx_outs,json=txOuts,proto3" json:"tx_outs,omitempty"`
}

func (x *ImportedOutputList) Reset() {
	*x = ImportedOutputList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportedOutputList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportedOutputList) ProtoMessage() {}

func (x *ImportedOutputList) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportedOutputList.ProtoReflect.Descriptor instead.
func (*ImportedOutputList) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{2}
}

func (x *ImportedOutputList) GetTxOuts() []*ImportedOutput {
	if x != nil {
		return x.TxOuts
	}
	return nil
}

type ImportedOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawOutput []byte `protobuf:"bytes,1,opt,name=raw_output,json=rawOutput,proto3" json:"raw_output,omitempty"`
	TxId      []byte `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	OutIdx    int32  `protobuf:"varint,3,opt,name=out_idx,json=outIdx,proto3" json:"out_idx,omitempty"`
}

func (x *ImportedOutput) Reset() {
	*x = ImportedOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportedOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportedOutput) ProtoMessage() {}

func (x *ImportedOutput) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportedOutput.ProtoReflect.Descriptor instead.
func (*ImportedOutput) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{3}
}

func (x *ImportedOutput) GetRawOutput() []byte {
	if x != nil {
		return x.RawOutput
	}
	return nil
}

func (x *ImportedOutput) GetTxId() []byte {
	if x != nil {
		return x.TxId
	}
	return nil
}

func (x *ImportedOutput) GetOutIdx() int32 {
	if x != nil {
		return x.OutIdx
	}
	return 0
}

type SnowPowProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WordIdx         int64    `protobuf:"varint,1,opt,name=word_idx,json=wordIdx,proto3" json:"word_idx,omitempty"`                        //Index of word in snow field
	MerkleComponent [][]byte `protobuf:"bytes,2,rep,name=merkle_component,json=merkleComponent,proto3" json:"merkle_component,omitempty"` // List of hashes
}

func (x *SnowPowProof) Reset() {
	*x = SnowPowProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnowPowProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnowPowProof) ProtoMessage() {}

func (x *SnowPowProof) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnowPowProof.ProtoReflect.Descriptor instead.
func (*SnowPowProof) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{4}
}

func (x *SnowPowProof) GetWordIdx() int64 {
	if x != nil {
		return x.WordIdx
	}
	return 0
}

func (x *SnowPowProof) GetMerkleComponent() [][]byte {
	if x != nil {
		return x.MerkleComponent
	}
	return nil
}

// The POW works via the first elements here all mixed
// to make a hash that decides which TXs to pull from previous
// blocks to make the back_tx_hash.
// Then all of it mixed to make the block hash, which has to be
// less than the target hash.
type BlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        int32           `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	BlockHeight    int32           `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	PrevBlockHash  []byte          `protobuf:"bytes,3,opt,name=prev_block_hash,json=prevBlockHash,proto3" json:"prev_block_hash,omitempty"`
	MerkleRootHash []byte          `protobuf:"bytes,4,opt,name=merkle_root_hash,json=merkleRootHash,proto3" json:"merkle_root_hash,omitempty"`
	UtxoRootHash   []byte          `protobuf:"bytes,5,opt,name=utxo_root_hash,json=utxoRootHash,proto3" json:"utxo_root_hash,omitempty"`
	Nonce          []byte          `protobuf:"bytes,6,opt,name=nonce,proto3" json:"nonce,omitempty"` // should be exactly 12 bytes
	Timestamp      int64           `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Target         []byte          `protobuf:"bytes,8,opt,name=target,proto3" json:"target,omitempty"`
	SnowField      int32           `protobuf:"varint,9,opt,name=snow_field,json=snowField,proto3" json:"snow_field,omitempty"` // Number of which snow field is in use
	SnowHash       []byte          `protobuf:"bytes,10,opt,name=snow_hash,json=snowHash,proto3" json:"snow_hash,omitempty"`    // From POW function, becomes block hash
	PowProof       []*SnowPowProof `protobuf:"bytes,11,rep,name=pow_proof,json=powProof,proto3" json:"pow_proof,omitempty"`
	ShardId        int32           `protobuf:"varint,12,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	// UTXO roots of all outputs we are mapping to other shards
	ShardExportRootHash map[int32][]byte `protobuf:"bytes,13,rep,name=shard_export_root_hash,json=shardExportRootHash,proto3" json:"shard_export_root_hash,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Shard -> list of blocks
	ShardImport map[int32]*BlockImportList `protobuf:"bytes,14,rep,name=shard_import,json=shardImport,proto3" json:"shard_import,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Might need to add the transaction data size sum if we want
	// to have light validation of shard splits
	TxDataSizeSum int32 `protobuf:"varint,15,opt,name=tx_data_size_sum,json=txDataSizeSum,proto3" json:"tx_data_size_sum,omitempty"`
	TxCount       int32 `protobuf:"varint,16,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{5}
}

func (x *BlockHeader) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BlockHeader) GetBlockHeight() int32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *BlockHeader) GetPrevBlockHash() []byte {
	if x != nil {
		return x.PrevBlockHash
	}
	return nil
}

func (x *BlockHeader) GetMerkleRootHash() []byte {
	if x != nil {
		return x.MerkleRootHash
	}
	return nil
}

func (x *BlockHeader) GetUtxoRootHash() []byte {
	if x != nil {
		return x.UtxoRootHash
	}
	return nil
}

func (x *BlockHeader) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *BlockHeader) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BlockHeader) GetTarget() []byte {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *BlockHeader) GetSnowField() int32 {
	if x != nil {
		return x.SnowField
	}
	return 0
}

func (x *BlockHeader) GetSnowHash() []byte {
	if x != nil {
		return x.SnowHash
	}
	return nil
}

func (x *BlockHeader) GetPowProof() []*SnowPowProof {
	if x != nil {
		return x.PowProof
	}
	return nil
}

func (x *BlockHeader) GetShardId() int32 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *BlockHeader) GetShardExportRootHash() map[int32][]byte {
	if x != nil {
		return x.ShardExportRootHash
	}
	return nil
}

func (x *BlockHeader) GetShardImport() map[int32]*BlockImportList {
	if x != nil {
		return x.ShardImport
	}
	return nil
}

func (x *BlockHeader) GetTxDataSizeSum() int32 {
	if x != nil {
		return x.TxDataSizeSum
	}
	return 0
}

func (x *BlockHeader) GetTxCount() int32 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

type BlockImportList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Height -> Block Hash
	HeightMap map[int32][]byte `protobuf:"bytes,1,rep,name=height_map,json=heightMap,proto3" json:"height_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BlockImportList) Reset() {
	*x = BlockImportList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockImportList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockImportList) ProtoMessage() {}

func (x *BlockImportList) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockImportList.ProtoReflect.Descriptor instead.
func (*BlockImportList) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{6}
}

func (x *BlockImportList) GetHeightMap() map[int32][]byte {
	if x != nil {
		return x.HeightMap
	}
	return nil
}

// TX Hash is hmac(sha256(inner_data), sha256(signature_data))
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Expected to be a TransactionInner proto, but we carry it as bytes because
	// we need it to have the same hash even after reserializing
	InnerData  []byte            `protobuf:"bytes,2,opt,name=inner_data,json=innerData,proto3" json:"inner_data,omitempty"`
	Signatures []*SignatureEntry `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{7}
}

func (x *Transaction) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Transaction) GetInnerData() []byte {
	if x != nil {
		return x.InnerData
	}
	return nil
}

func (x *Transaction) GetSignatures() []*SignatureEntry {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type TransactionInner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        int32                `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	IsCoinbase     bool                 `protobuf:"varint,2,opt,name=is_coinbase,json=isCoinbase,proto3" json:"is_coinbase,omitempty"`
	CoinbaseExtras *CoinbaseExtras      `protobuf:"bytes,3,opt,name=coinbase_extras,json=coinbaseExtras,proto3" json:"coinbase_extras,omitempty"`
	Inputs         []*TransactionInput  `protobuf:"bytes,4,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs        []*TransactionOutput `protobuf:"bytes,5,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// Needed to claim an script_hash, this address spec
	// must hash to the recipient_spec_hash claimed
	// There must be a claim that matches the recipient_spec_hash for
	// Each output spent in the inputs list of this transaction
	//
	// If multiple inputs need the same recipient_spec_hash, a single
	// claim shall suffice for them
	Claims []*AddressSpec `protobuf:"bytes,6,rep,name=claims,proto3" json:"claims,omitempty"`
	//TransactionRequirements requirements = 7;
	Fee   int64  `protobuf:"varint,8,opt,name=fee,proto3" json:"fee,omitempty"`
	Extra []byte `protobuf:"bytes,10,opt,name=extra,proto3" json:"extra,omitempty"` //Limited to 100 bytes, so short letters to grandma
}

func (x *TransactionInner) Reset() {
	*x = TransactionInner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionInner) ProtoMessage() {}

func (x *TransactionInner) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionInner.ProtoReflect.Descriptor instead.
func (*TransactionInner) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{8}
}

func (x *TransactionInner) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TransactionInner) GetIsCoinbase() bool {
	if x != nil {
		return x.IsCoinbase
	}
	return false
}

func (x *TransactionInner) GetCoinbaseExtras() *CoinbaseExtras {
	if x != nil {
		return x.CoinbaseExtras
	}
	return nil
}

func (x *TransactionInner) GetInputs() []*TransactionInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TransactionInner) GetOutputs() []*TransactionOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TransactionInner) GetClaims() []*AddressSpec {
	if x != nil {
		return x.Claims
	}
	return nil
}

func (x *TransactionInner) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *TransactionInner) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CoinbaseExtras struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight int32 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"` // this of course in the block header as well, but this makes sure that each
	// coinbase is unique otherwise you can have multiple that hash to the same to great
	// sadness (the bitcoin block chain has many lessons)
	Remarks         []byte  `protobuf:"bytes,2,opt,name=remarks,proto3" json:"remarks,omitempty"` //remarks from the miner for the good of the blockchain
	MotionsApproved []int32 `protobuf:"varint,3,rep,packed,name=motions_approved,json=motionsApproved,proto3" json:"motions_approved,omitempty"`
	MotionsRejected []int32 `protobuf:"varint,4,rep,packed,name=motions_rejected,json=motionsRejected,proto3" json:"motions_rejected,omitempty"`
	ShardId         int32   `protobuf:"varint,5,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"` // Same idea as the block height
}

func (x *CoinbaseExtras) Reset() {
	*x = CoinbaseExtras{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinbaseExtras) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinbaseExtras) ProtoMessage() {}

func (x *CoinbaseExtras) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinbaseExtras.ProtoReflect.Descriptor instead.
func (*CoinbaseExtras) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{9}
}

func (x *CoinbaseExtras) GetBlockHeight() int32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *CoinbaseExtras) GetRemarks() []byte {
	if x != nil {
		return x.Remarks
	}
	return nil
}

func (x *CoinbaseExtras) GetMotionsApproved() []int32 {
	if x != nil {
		return x.MotionsApproved
	}
	return nil
}

func (x *CoinbaseExtras) GetMotionsRejected() []int32 {
	if x != nil {
		return x.MotionsRejected
	}
	return nil
}

func (x *CoinbaseExtras) GetShardId() int32 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

// If any of these are defined then
// these things are required to be met for the transaction
// to be confirmed or the TransactionOutput to be used
// depending on where the requirement is defined
type TransactionRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//bytes required_block = 1;
	//bytes required_tx = 2;
	RequiredBlockHeight int32 `protobuf:"varint,3,opt,name=required_block_height,json=requiredBlockHeight,proto3" json:"required_block_height,omitempty"`
	RequiredTime        int64 `protobuf:"varint,4,opt,name=required_time,json=requiredTime,proto3" json:"required_time,omitempty"`
}

func (x *TransactionRequirements) Reset() {
	*x = TransactionRequirements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionRequirements) ProtoMessage() {}

func (x *TransactionRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionRequirements.ProtoReflect.Descriptor instead.
func (*TransactionRequirements) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{10}
}

func (x *TransactionRequirements) GetRequiredBlockHeight() int32 {
	if x != nil {
		return x.RequiredBlockHeight
	}
	return 0
}

func (x *TransactionRequirements) GetRequiredTime() int64 {
	if x != nil {
		return x.RequiredTime
	}
	return 0
}

type SignatureEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClaimIdx  int32  `protobuf:"varint,1,opt,name=claim_idx,json=claimIdx,proto3" json:"claim_idx,omitempty"`
	KeyIdx    int32  `protobuf:"varint,2,opt,name=key_idx,json=keyIdx,proto3" json:"key_idx,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignatureEntry) Reset() {
	*x = SignatureEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureEntry) ProtoMessage() {}

func (x *SignatureEntry) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureEntry.ProtoReflect.Descriptor instead.
func (*SignatureEntry) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{11}
}

func (x *SignatureEntry) GetClaimIdx() int32 {
	if x != nil {
		return x.ClaimIdx
	}
	return 0
}

func (x *SignatureEntry) GetKeyIdx() int32 {
	if x != nil {
		return x.KeyIdx
	}
	return 0
}

func (x *SignatureEntry) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type TransactionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecHash    []byte `protobuf:"bytes,1,opt,name=spec_hash,json=specHash,proto3" json:"spec_hash,omitempty"`
	SrcTxId     []byte `protobuf:"bytes,2,opt,name=src_tx_id,json=srcTxId,proto3" json:"src_tx_id,omitempty"`
	SrcTxOutIdx int32  `protobuf:"varint,3,opt,name=src_tx_out_idx,json=srcTxOutIdx,proto3" json:"src_tx_out_idx,omitempty"`
	Value       int64  `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"` // SIP4 - Optional - if set (non-zero) transaction validation will enforce
}

func (x *TransactionInput) Reset() {
	*x = TransactionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionInput) ProtoMessage() {}

func (x *TransactionInput) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionInput.ProtoReflect.Descriptor instead.
func (*TransactionInput) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{12}
}

func (x *TransactionInput) GetSpecHash() []byte {
	if x != nil {
		return x.SpecHash
	}
	return nil
}

func (x *TransactionInput) GetSrcTxId() []byte {
	if x != nil {
		return x.SrcTxId
	}
	return nil
}

func (x *TransactionInput) GetSrcTxOutIdx() int32 {
	if x != nil {
		return x.SrcTxOutIdx
	}
	return 0
}

func (x *TransactionInput) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type TransactionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value             int64  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	RecipientSpecHash []byte `protobuf:"bytes,2,opt,name=recipient_spec_hash,json=recipientSpecHash,proto3" json:"recipient_spec_hash,omitempty"`
	// This could easily make an unspendable output if it refernces a block or tx
	// that will never be in.  Use with care.
	Requirements *TransactionRequirements `protobuf:"bytes,3,opt,name=requirements,proto3" json:"requirements,omitempty"`
	// Doesn't do anything protocol wise, other things might respect
	// this as something.
	ForBenefitOfSpecHash []byte `protobuf:"bytes,4,opt,name=for_benefit_of_spec_hash,json=forBenefitOfSpecHash,proto3" json:"for_benefit_of_spec_hash,omitempty"`
	// Also doesn't do anything protocol wise, but might be respected
	// by other things.  Usually to be used in conjunction with a fbo hash
	// spec (above).
	Ids         *ClaimedIdentifiers `protobuf:"bytes,5,opt,name=ids,proto3" json:"ids,omitempty"`
	TargetShard int32               `protobuf:"varint,6,opt,name=target_shard,json=targetShard,proto3" json:"target_shard,omitempty"`
}

func (x *TransactionOutput) Reset() {
	*x = TransactionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionOutput) ProtoMessage() {}

func (x *TransactionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionOutput.ProtoReflect.Descriptor instead.
func (*TransactionOutput) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{13}
}

func (x *TransactionOutput) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TransactionOutput) GetRecipientSpecHash() []byte {
	if x != nil {
		return x.RecipientSpecHash
	}
	return nil
}

func (x *TransactionOutput) GetRequirements() *TransactionRequirements {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *TransactionOutput) GetForBenefitOfSpecHash() []byte {
	if x != nil {
		return x.ForBenefitOfSpecHash
	}
	return nil
}

func (x *TransactionOutput) GetIds() *ClaimedIdentifiers {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *TransactionOutput) GetTargetShard() int32 {
	if x != nil {
		return x.TargetShard
	}
	return 0
}

type ClaimedIdentifiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username    []byte `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Channelname []byte `protobuf:"bytes,2,opt,name=channelname,proto3" json:"channelname,omitempty"`
}

func (x *ClaimedIdentifiers) Reset() {
	*x = ClaimedIdentifiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimedIdentifiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimedIdentifiers) ProtoMessage() {}

func (x *ClaimedIdentifiers) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimedIdentifiers.ProtoReflect.Descriptor instead.
func (*ClaimedIdentifiers) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{14}
}

func (x *ClaimedIdentifiers) GetUsername() []byte {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *ClaimedIdentifiers) GetChannelname() []byte {
	if x != nil {
		return x.Channelname
	}
	return nil
}

// The hash of this will simply be the hash of:
// required_signers (4 bytes)
// number of sig_specs (4 bytes)
// for each sig spec:
//  -signature type (4 bytes)
//  -size of key (4 bytes)
//  -key data (matching size given)
//
type AddressSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiredSigners int32      `protobuf:"varint,1,opt,name=required_signers,json=requiredSigners,proto3" json:"required_signers,omitempty"`
	SigSpecs        []*SigSpec `protobuf:"bytes,2,rep,name=sig_specs,json=sigSpecs,proto3" json:"sig_specs,omitempty"`
}

func (x *AddressSpec) Reset() {
	*x = AddressSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressSpec) ProtoMessage() {}

func (x *AddressSpec) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressSpec.ProtoReflect.Descriptor instead.
func (*AddressSpec) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{15}
}

func (x *AddressSpec) GetRequiredSigners() int32 {
	if x != nil {
		return x.RequiredSigners
	}
	return 0
}

func (x *AddressSpec) GetSigSpecs() []*SigSpec {
	if x != nil {
		return x.SigSpecs
	}
	return nil
}

type SigSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignatureType int32  `protobuf:"varint,1,opt,name=signature_type,json=signatureType,proto3" json:"signature_type,omitempty"`
	PublicKey     []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *SigSpec) Reset() {
	*x = SigSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigSpec) ProtoMessage() {}

func (x *SigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigSpec.ProtoReflect.Descriptor instead.
func (*SigSpec) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{16}
}

func (x *SigSpec) GetSignatureType() int32 {
	if x != nil {
		return x.SignatureType
	}
	return 0
}

func (x *SigSpec) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type BlockTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block         *Block `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	AdvancesShard int32  `protobuf:"varint,2,opt,name=advances_shard,json=advancesShard,proto3" json:"advances_shard,omitempty"`
}

func (x *BlockTemplate) Reset() {
	*x = BlockTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockTemplate) ProtoMessage() {}

func (x *BlockTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockTemplate.ProtoReflect.Descriptor instead.
func (*BlockTemplate) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{17}
}

func (x *BlockTemplate) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *BlockTemplate) GetAdvancesShard() int32 {
	if x != nil {
		return x.AdvancesShard
	}
	return 0
}

type PeerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Z:
	//	*PeerMessage_Tx
	//	*PeerMessage_Tip
	//	*PeerMessage_ReqBlock
	//	*PeerMessage_Block
	//	*PeerMessage_ReqHeader
	//	*PeerMessage_Header
	//	*PeerMessage_ReqCluster
	//	*PeerMessage_ReqImportBlock
	//	*PeerMessage_ImportBlock
	//	*PeerMessage_ReqPreviewChain
	//	*PeerMessage_PreviewChain
	Z                isPeerMessage_Z `protobuf_oneof:"z"`
	ReqHeaderShardId int32           `protobuf:"varint,50,opt,name=req_header_shard_id,json=reqHeaderShardId,proto3" json:"req_header_shard_id,omitempty"`
}

func (x *PeerMessage) Reset() {
	*x = PeerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerMessage) ProtoMessage() {}

func (x *PeerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerMessage.ProtoReflect.Descriptor instead.
func (*PeerMessage) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{18}
}

func (m *PeerMessage) GetZ() isPeerMessage_Z {
	if m != nil {
		return m.Z
	}
	return nil
}

func (x *PeerMessage) GetTx() *Transaction {
	if x, ok := x.GetZ().(*PeerMessage_Tx); ok {
		return x.Tx
	}
	return nil
}

func (x *PeerMessage) GetTip() *PeerChainTip {
	if x, ok := x.GetZ().(*PeerMessage_Tip); ok {
		return x.Tip
	}
	return nil
}

func (x *PeerMessage) GetReqBlock() *RequestBlock {
	if x, ok := x.GetZ().(*PeerMessage_ReqBlock); ok {
		return x.ReqBlock
	}
	return nil
}

func (x *PeerMessage) GetBlock() *Block {
	if x, ok := x.GetZ().(*PeerMessage_Block); ok {
		return x.Block
	}
	return nil
}

func (x *PeerMessage) GetReqHeader() *RequestBlockHeader {
	if x, ok := x.GetZ().(*PeerMessage_ReqHeader); ok {
		return x.ReqHeader
	}
	return nil
}

func (x *PeerMessage) GetHeader() *BlockHeader {
	if x, ok := x.GetZ().(*PeerMessage_Header); ok {
		return x.Header
	}
	return nil
}

func (x *PeerMessage) GetReqCluster() *RequestTransaction {
	if x, ok := x.GetZ().(*PeerMessage_ReqCluster); ok {
		return x.ReqCluster
	}
	return nil
}

func (x *PeerMessage) GetReqImportBlock() *RequestImportedBlock {
	if x, ok := x.GetZ().(*PeerMessage_ReqImportBlock); ok {
		return x.ReqImportBlock
	}
	return nil
}

func (x *PeerMessage) GetImportBlock() *ImportedBlock {
	if x, ok := x.GetZ().(*PeerMessage_ImportBlock); ok {
		return x.ImportBlock
	}
	return nil
}

func (x *PeerMessage) GetReqPreviewChain() *RequestPreviewChain {
	if x, ok := x.GetZ().(*PeerMessage_ReqPreviewChain); ok {
		return x.ReqPreviewChain
	}
	return nil
}

func (x *PeerMessage) GetPreviewChain() *PreviewChain {
	if x, ok := x.GetZ().(*PeerMessage_PreviewChain); ok {
		return x.PreviewChain
	}
	return nil
}

func (x *PeerMessage) GetReqHeaderShardId() int32 {
	if x != nil {
		return x.ReqHeaderShardId
	}
	return 0
}

type isPeerMessage_Z interface {
	isPeerMessage_Z()
}

type PeerMessage_Tx struct {
	Tx *Transaction `protobuf:"bytes,1,opt,name=tx,proto3,oneof"`
}

type PeerMessage_Tip struct {
	Tip *PeerChainTip `protobuf:"bytes,2,opt,name=tip,proto3,oneof"`
}

type PeerMessage_ReqBlock struct {
	ReqBlock *RequestBlock `protobuf:"bytes,3,opt,name=req_block,json=reqBlock,proto3,oneof"`
}

type PeerMessage_Block struct {
	Block *Block `protobuf:"bytes,4,opt,name=block,proto3,oneof"`
}

type PeerMessage_ReqHeader struct {
	ReqHeader *RequestBlockHeader `protobuf:"bytes,5,opt,name=req_header,json=reqHeader,proto3,oneof"`
}

type PeerMessage_Header struct {
	Header *BlockHeader `protobuf:"bytes,6,opt,name=header,proto3,oneof"`
}

type PeerMessage_ReqCluster struct {
	ReqCluster *RequestTransaction `protobuf:"bytes,7,opt,name=req_cluster,json=reqCluster,proto3,oneof"`
}

type PeerMessage_ReqImportBlock struct {
	ReqImportBlock *RequestImportedBlock `protobuf:"bytes,8,opt,name=req_import_block,json=reqImportBlock,proto3,oneof"`
}

type PeerMessage_ImportBlock struct {
	ImportBlock *ImportedBlock `protobuf:"bytes,9,opt,name=import_block,json=importBlock,proto3,oneof"`
}

type PeerMessage_ReqPreviewChain struct {
	ReqPreviewChain *RequestPreviewChain `protobuf:"bytes,10,opt,name=req_preview_chain,json=reqPreviewChain,proto3,oneof"`
}

type PeerMessage_PreviewChain struct {
	PreviewChain *PreviewChain `protobuf:"bytes,11,opt,name=preview_chain,json=previewChain,proto3,oneof"`
}

func (*PeerMessage_Tx) isPeerMessage_Z() {}

func (*PeerMessage_Tip) isPeerMessage_Z() {}

func (*PeerMessage_ReqBlock) isPeerMessage_Z() {}

func (*PeerMessage_Block) isPeerMessage_Z() {}

func (*PeerMessage_ReqHeader) isPeerMessage_Z() {}

func (*PeerMessage_Header) isPeerMessage_Z() {}

func (*PeerMessage_ReqCluster) isPeerMessage_Z() {}

func (*PeerMessage_ReqImportBlock) isPeerMessage_Z() {}

func (*PeerMessage_ImportBlock) isPeerMessage_Z() {}

func (*PeerMessage_ReqPreviewChain) isPeerMessage_Z() {}

func (*PeerMessage_PreviewChain) isPeerMessage_Z() {}

type PeerChainTip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkName string         `protobuf:"bytes,1,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
	Header      *BlockHeader   `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	Peers       []*PeerInfo    `protobuf:"bytes,3,rep,name=peers,proto3" json:"peers,omitempty"`
	Version     string         `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	SignedHead  *SignedMessage `protobuf:"bytes,5,opt,name=signed_head,json=signedHead,proto3" json:"signed_head,omitempty"`
}

func (x *PeerChainTip) Reset() {
	*x = PeerChainTip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerChainTip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerChainTip) ProtoMessage() {}

func (x *PeerChainTip) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerChainTip.ProtoReflect.Descriptor instead.
func (*PeerChainTip) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{19}
}

func (x *PeerChainTip) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

func (x *PeerChainTip) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PeerChainTip) GetPeers() []*PeerInfo {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *PeerChainTip) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PeerChainTip) GetSignedHead() *SignedMessage {
	if x != nil {
		return x.SignedHead
	}
	return nil
}

type PeerTipInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Previews  []*BlockPreview `protobuf:"bytes,1,rep,name=previews,proto3" json:"previews,omitempty"`
	CoordHead *BlockPreview   `protobuf:"bytes,2,opt,name=coord_head,json=coordHead,proto3" json:"coord_head,omitempty"` // Best known coordinator head
}

func (x *PeerTipInfo) Reset() {
	*x = PeerTipInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerTipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerTipInfo) ProtoMessage() {}

func (x *PeerTipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerTipInfo.ProtoReflect.Descriptor instead.
func (*PeerTipInfo) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{20}
}

func (x *PeerTipInfo) GetPreviews() []*BlockPreview {
	if x != nil {
		return x.Previews
	}
	return nil
}

func (x *PeerTipInfo) GetCoordHead() *BlockPreview {
	if x != nil {
		return x.CoordHead
	}
	return nil
}

type BlockPreview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight   int32  `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	PrevBlockHash []byte `protobuf:"bytes,2,opt,name=prev_block_hash,json=prevBlockHash,proto3" json:"prev_block_hash,omitempty"`
	SnowHash      []byte `protobuf:"bytes,3,opt,name=snow_hash,json=snowHash,proto3" json:"snow_hash,omitempty"` // block hash
	ShardId       int32  `protobuf:"varint,4,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
}

func (x *BlockPreview) Reset() {
	*x = BlockPreview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockPreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockPreview) ProtoMessage() {}

func (x *BlockPreview) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockPreview.ProtoReflect.Descriptor instead.
func (*BlockPreview) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{21}
}

func (x *BlockPreview) GetBlockHeight() int32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *BlockPreview) GetPrevBlockHash() []byte {
	if x != nil {
		return x.PrevBlockHash
	}
	return nil
}

func (x *BlockPreview) GetSnowHash() []byte {
	if x != nil {
		return x.SnowHash
	}
	return nil
}

func (x *BlockPreview) GetShardId() int32 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

type RequestPreviewChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartBlockHash      []byte `protobuf:"bytes,1,opt,name=start_block_hash,json=startBlockHash,proto3" json:"start_block_hash,omitempty"`
	RequestedBlocksBack int32  `protobuf:"varint,2,opt,name=requested_blocks_back,json=requestedBlocksBack,proto3" json:"requested_blocks_back,omitempty"`
}

func (x *RequestPreviewChain) Reset() {
	*x = RequestPreviewChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestPreviewChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPreviewChain) ProtoMessage() {}

func (x *RequestPreviewChain) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestPreviewChain.ProtoReflect.Descriptor instead.
func (*RequestPreviewChain) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{22}
}

func (x *RequestPreviewChain) GetStartBlockHash() []byte {
	if x != nil {
		return x.StartBlockHash
	}
	return nil
}

func (x *RequestPreviewChain) GetRequestedBlocksBack() int32 {
	if x != nil {
		return x.RequestedBlocksBack
	}
	return 0
}

type PreviewChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Previews []*BlockPreview `protobuf:"bytes,1,rep,name=previews,proto3" json:"previews,omitempty"`
}

func (x *PreviewChain) Reset() {
	*x = PreviewChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewChain) ProtoMessage() {}

func (x *PreviewChain) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewChain.ProtoReflect.Descriptor instead.
func (*PreviewChain) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{23}
}

func (x *PreviewChain) GetPreviews() []*BlockPreview {
	if x != nil {
		return x.Previews
	}
	return nil
}

type PeerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host        string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port        int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	LastChecked int64  `protobuf:"varint,3,opt,name=last_checked,json=lastChecked,proto3" json:"last_checked,omitempty"`
	LastPassed  int64  `protobuf:"varint,4,opt,name=last_passed,json=lastPassed,proto3" json:"last_passed,omitempty"`
	Learned     int64  `protobuf:"varint,5,opt,name=learned,proto3" json:"learned,omitempty"`
	Version     string `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	NodeId      []byte `protobuf:"bytes,7,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	//bool tls = 8; bad idea, using enum - DEPRECATED
	NodeSnowAddress        []byte                  `protobuf:"bytes,9,opt,name=node_snow_address,json=nodeSnowAddress,proto3" json:"node_snow_address,omitempty"` //Used for TLS
	ConnectionType         PeerInfo_ConnectionType `protobuf:"varint,10,opt,name=connection_type,json=connectionType,proto3,enum=snowblossom.PeerInfo_ConnectionType" json:"connection_type,omitempty"`
	ShardIdSet             []int32                 `protobuf:"varint,11,rep,packed,name=shard_id_set,json=shardIdSet,proto3" json:"shard_id_set,omitempty"`      // The set of shards I am configured for
	TrustnetAddress        []byte                  `protobuf:"bytes,12,opt,name=trustnet_address,json=trustnetAddress,proto3" json:"trustnet_address,omitempty"` // should switch this entire peer info into a signed object
	TrustnetSignedPeerInfo *SignedMessage          `protobuf:"bytes,13,opt,name=trustnet_signed_peer_info,json=trustnetSignedPeerInfo,proto3" json:"trustnet_signed_peer_info,omitempty"`
}

func (x *PeerInfo) Reset() {
	*x = PeerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerInfo) ProtoMessage() {}

func (x *PeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerInfo.ProtoReflect.Descriptor instead.
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{24}
}

func (x *PeerInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PeerInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PeerInfo) GetLastChecked() int64 {
	if x != nil {
		return x.LastChecked
	}
	return 0
}

func (x *PeerInfo) GetLastPassed() int64 {
	if x != nil {
		return x.LastPassed
	}
	return 0
}

func (x *PeerInfo) GetLearned() int64 {
	if x != nil {
		return x.Learned
	}
	return 0
}

func (x *PeerInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PeerInfo) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *PeerInfo) GetNodeSnowAddress() []byte {
	if x != nil {
		return x.NodeSnowAddress
	}
	return nil
}

func (x *PeerInfo) GetConnectionType() PeerInfo_ConnectionType {
	if x != nil {
		return x.ConnectionType
	}
	return PeerInfo_GRPC_TCP
}

func (x *PeerInfo) GetShardIdSet() []int32 {
	if x != nil {
		return x.ShardIdSet
	}
	return nil
}

func (x *PeerInfo) GetTrustnetAddress() []byte {
	if x != nil {
		return x.TrustnetAddress
	}
	return nil
}

func (x *PeerInfo) GetTrustnetSignedPeerInfo() *SignedMessage {
	if x != nil {
		return x.TrustnetSignedPeerInfo
	}
	return nil
}

type TransactionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Z:
	//	*TransactionStatus_Unknown
	//	*TransactionStatus_Mempool
	//	*TransactionStatus_Confirmed
	Z               isTransactionStatus_Z `protobuf_oneof:"z"`
	HeightConfirmed int32                 `protobuf:"varint,4,opt,name=height_confirmed,json=heightConfirmed,proto3" json:"height_confirmed,omitempty"`
	Confirmations   int32                 `protobuf:"varint,5,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
}

func (x *TransactionStatus) Reset() {
	*x = TransactionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionStatus) ProtoMessage() {}

func (x *TransactionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionStatus.ProtoReflect.Descriptor instead.
func (*TransactionStatus) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{25}
}

func (m *TransactionStatus) GetZ() isTransactionStatus_Z {
	if m != nil {
		return m.Z
	}
	return nil
}

func (x *TransactionStatus) GetUnknown() bool {
	if x, ok := x.GetZ().(*TransactionStatus_Unknown); ok {
		return x.Unknown
	}
	return false
}

func (x *TransactionStatus) GetMempool() bool {
	if x, ok := x.GetZ().(*TransactionStatus_Mempool); ok {
		return x.Mempool
	}
	return false
}

func (x *TransactionStatus) GetConfirmed() bool {
	if x, ok := x.GetZ().(*TransactionStatus_Confirmed); ok {
		return x.Confirmed
	}
	return false
}

func (x *TransactionStatus) GetHeightConfirmed() int32 {
	if x != nil {
		return x.HeightConfirmed
	}
	return 0
}

func (x *TransactionStatus) GetConfirmations() int32 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

type isTransactionStatus_Z interface {
	isTransactionStatus_Z()
}

type TransactionStatus_Unknown struct {
	Unknown bool `protobuf:"varint,1,opt,name=unknown,proto3,oneof"`
}

type TransactionStatus_Mempool struct {
	Mempool bool `protobuf:"varint,2,opt,name=mempool,proto3,oneof"`
}

type TransactionStatus_Confirmed struct {
	Confirmed bool `protobuf:"varint,3,opt,name=confirmed,proto3,oneof"`
}

func (*TransactionStatus_Unknown) isTransactionStatus_Z() {}

func (*TransactionStatus_Mempool) isTransactionStatus_Z() {}

func (*TransactionStatus_Confirmed) isTransactionStatus_Z() {}

type RequestBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Z:
	//	*RequestBlock_BlockHash
	//	*RequestBlock_BlockHeight
	Z       isRequestBlock_Z `protobuf_oneof:"z"`
	ShardId int32            `protobuf:"varint,4,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"` // only does anything with block_height
}

func (x *RequestBlock) Reset() {
	*x = RequestBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBlock) ProtoMessage() {}

func (x *RequestBlock) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBlock.ProtoReflect.Descriptor instead.
func (*RequestBlock) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{26}
}

func (m *RequestBlock) GetZ() isRequestBlock_Z {
	if m != nil {
		return m.Z
	}
	return nil
}

func (x *RequestBlock) GetBlockHash() []byte {
	if x, ok := x.GetZ().(*RequestBlock_BlockHash); ok {
		return x.BlockHash
	}
	return nil
}

func (x *RequestBlock) GetBlockHeight() int32 {
	if x, ok := x.GetZ().(*RequestBlock_BlockHeight); ok {
		return x.BlockHeight
	}
	return 0
}

func (x *RequestBlock) GetShardId() int32 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

type isRequestBlock_Z interface {
	isRequestBlock_Z()
}

type RequestBlock_BlockHash struct {
	BlockHash []byte `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3,oneof"`
}

type RequestBlock_BlockHeight struct {
	BlockHeight int32 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3,oneof"`
}

func (*RequestBlock_BlockHash) isRequestBlock_Z() {}

func (*RequestBlock_BlockHeight) isRequestBlock_Z() {}

type RequestBlockSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash []byte `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (x *RequestBlockSummary) Reset() {
	*x = RequestBlockSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBlockSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBlockSummary) ProtoMessage() {}

func (x *RequestBlockSummary) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBlockSummary.ProtoReflect.Descriptor instead.
func (*RequestBlockSummary) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{27}
}

func (x *RequestBlockSummary) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

type RequestImportedBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash []byte `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (x *RequestImportedBlock) Reset() {
	*x = RequestImportedBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestImportedBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestImportedBlock) ProtoMessage() {}

func (x *RequestImportedBlock) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestImportedBlock.ProtoReflect.Descriptor instead.
func (*RequestImportedBlock) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{28}
}

func (x *RequestImportedBlock) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

type RequestTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (x *RequestTransaction) Reset() {
	*x = RequestTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTransaction) ProtoMessage() {}

func (x *RequestTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTransaction.ProtoReflect.Descriptor instead.
func (*RequestTransaction) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{29}
}

func (x *RequestTransaction) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

type RequestBlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Z:
	//	*RequestBlockHeader_BlockHeight
	//	*RequestBlockHeader_BlockHash
	Z       isRequestBlockHeader_Z `protobuf_oneof:"z"`
	ShardId int32                  `protobuf:"varint,3,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"` // only does anything with block_height
}

func (x *RequestBlockHeader) Reset() {
	*x = RequestBlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBlockHeader) ProtoMessage() {}

func (x *RequestBlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBlockHeader.ProtoReflect.Descriptor instead.
func (*RequestBlockHeader) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{30}
}

func (m *RequestBlockHeader) GetZ() isRequestBlockHeader_Z {
	if m != nil {
		return m.Z
	}
	return nil
}

func (x *RequestBlockHeader) GetBlockHeight() int32 {
	if x, ok := x.GetZ().(*RequestBlockHeader_BlockHeight); ok {
		return x.BlockHeight
	}
	return 0
}

func (x *RequestBlockHeader) GetBlockHash() []byte {
	if x, ok := x.GetZ().(*RequestBlockHeader_BlockHash); ok {
		return x.BlockHash
	}
	return nil
}

func (x *RequestBlockHeader) GetShardId() int32 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

type isRequestBlockHeader_Z interface {
	isRequestBlockHeader_Z()
}

type RequestBlockHeader_BlockHeight struct {
	BlockHeight int32 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3,oneof"`
}

type RequestBlockHeader_BlockHash struct {
	BlockHash []byte `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3,oneof"` // only works by height in PeerMessage
}

func (*RequestBlockHeader_BlockHeight) isRequestBlockHeader_Z() {}

func (*RequestBlockHeader_BlockHash) isRequestBlockHeader_Z() {}

type AddressUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	MempoolChanges  bool   `protobuf:"varint,2,opt,name=mempool_changes,json=mempoolChanges,proto3" json:"mempool_changes,omitempty"` // true iff there are mempool transactions
	CurrentUtxoRoot []byte `protobuf:"bytes,4,opt,name=current_utxo_root,json=currentUtxoRoot,proto3" json:"current_utxo_root,omitempty"`
}

func (x *AddressUpdate) Reset() {
	*x = AddressUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressUpdate) ProtoMessage() {}

func (x *AddressUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressUpdate.ProtoReflect.Descriptor instead.
func (*AddressUpdate) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{31}
}

func (x *AddressUpdate) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AddressUpdate) GetMempoolChanges() bool {
	if x != nil {
		return x.MempoolChanges
	}
	return false
}

func (x *AddressUpdate) GetCurrentUtxoRoot() []byte {
	if x != nil {
		return x.CurrentUtxoRoot
	}
	return nil
}

type SubmitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success       bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	ShardAccepted int32  `protobuf:"varint,3,opt,name=shard_accepted,json=shardAccepted,proto3" json:"shard_accepted,omitempty"`
}

func (x *SubmitReply) Reset() {
	*x = SubmitReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitReply) ProtoMessage() {}

func (x *SubmitReply) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitReply.ProtoReflect.Descriptor instead.
func (*SubmitReply) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{32}
}

func (x *SubmitReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SubmitReply) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *SubmitReply) GetShardAccepted() int32 {
	if x != nil {
		return x.ShardAccepted
	}
	return 0
}

type FeeEstimate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeePerByte float64           `protobuf:"fixed64,1,opt,name=fee_per_byte,json=feePerByte,proto3" json:"fee_per_byte,omitempty"`                                                                                  //flakes per byte of tx
	ShardMap   map[int32]float64 `protobuf:"bytes,2,rep,name=shard_map,json=shardMap,proto3" json:"shard_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"` // map of shard id to fee in flakes per byte of tx
}

func (x *FeeEstimate) Reset() {
	*x = FeeEstimate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeEstimate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeEstimate) ProtoMessage() {}

func (x *FeeEstimate) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeEstimate.ProtoReflect.Descriptor instead.
func (*FeeEstimate) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{33}
}

func (x *FeeEstimate) GetFeePerByte() float64 {
	if x != nil {
		return x.FeePerByte
	}
	return 0
}

func (x *FeeEstimate) GetShardMap() map[int32]float64 {
	if x != nil {
		return x.ShardMap
	}
	return nil
}

type SubscribeBlockTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayRewardToSpecHash []byte             `protobuf:"bytes,1,opt,name=pay_reward_to_spec_hash,json=payRewardToSpecHash,proto3" json:"pay_reward_to_spec_hash,omitempty"`
	RefreshDelay        int64              `protobuf:"varint,2,opt,name=refresh_delay,json=refreshDelay,proto3" json:"refresh_delay,omitempty"` // time in ms to get updated block templates of the same block number - ignored
	Extras              *CoinbaseExtras    `protobuf:"bytes,3,opt,name=extras,proto3" json:"extras,omitempty"`
	PayRatios           map[string]float64 `protobuf:"bytes,4,rep,name=pay_ratios,json=payRatios,proto3" json:"pay_ratios,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *SubscribeBlockTemplateRequest) Reset() {
	*x = SubscribeBlockTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeBlockTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeBlockTemplateRequest) ProtoMessage() {}

func (x *SubscribeBlockTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeBlockTemplateRequest.ProtoReflect.Descriptor instead.
func (*SubscribeBlockTemplateRequest) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{34}
}

func (x *SubscribeBlockTemplateRequest) GetPayRewardToSpecHash() []byte {
	if x != nil {
		return x.PayRewardToSpecHash
	}
	return nil
}

func (x *SubscribeBlockTemplateRequest) GetRefreshDelay() int64 {
	if x != nil {
		return x.RefreshDelay
	}
	return 0
}

func (x *SubscribeBlockTemplateRequest) GetExtras() *CoinbaseExtras {
	if x != nil {
		return x.Extras
	}
	return nil
}

func (x *SubscribeBlockTemplateRequest) GetPayRatios() map[string]float64 {
	if x != nil {
		return x.PayRatios
	}
	return nil
}

type GetUTXONodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix       []byte `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	IncludeProof bool   `protobuf:"varint,2,opt,name=include_proof,json=includeProof,proto3" json:"include_proof,omitempty"`
	MaxResults   int32  `protobuf:"varint,3,opt,name=max_results,json=maxResults,proto3" json:"max_results,omitempty"`
	// If root hash specified, answer will use this specific utxo root as basis rather than current.
	// Can be used to ask about about previous block or get a consistent view regardless of new
	// blocks for a series of queries. Also, Series of Queries will be my new anti-folk acapella band.
	//
	// Types that are assignable to UtxoType:
	//	*GetUTXONodeRequest_UtxoRootHash
	//	*GetUTXONodeRequest_ShardId
	//	*GetUTXONodeRequest_AllShards
	UtxoType isGetUTXONodeRequest_UtxoType `protobuf_oneof:"utxo_type"`
}

func (x *GetUTXONodeRequest) Reset() {
	*x = GetUTXONodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUTXONodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUTXONodeRequest) ProtoMessage() {}

func (x *GetUTXONodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUTXONodeRequest.ProtoReflect.Descriptor instead.
func (*GetUTXONodeRequest) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{35}
}

func (x *GetUTXONodeRequest) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *GetUTXONodeRequest) GetIncludeProof() bool {
	if x != nil {
		return x.IncludeProof
	}
	return false
}

func (x *GetUTXONodeRequest) GetMaxResults() int32 {
	if x != nil {
		return x.MaxResults
	}
	return 0
}

func (m *GetUTXONodeRequest) GetUtxoType() isGetUTXONodeRequest_UtxoType {
	if m != nil {
		return m.UtxoType
	}
	return nil
}

func (x *GetUTXONodeRequest) GetUtxoRootHash() []byte {
	if x, ok := x.GetUtxoType().(*GetUTXONodeRequest_UtxoRootHash); ok {
		return x.UtxoRootHash
	}
	return nil
}

func (x *GetUTXONodeRequest) GetShardId() int32 {
	if x, ok := x.GetUtxoType().(*GetUTXONodeRequest_ShardId); ok {
		return x.ShardId
	}
	return 0
}

func (x *GetUTXONodeRequest) GetAllShards() bool {
	if x, ok := x.GetUtxoType().(*GetUTXONodeRequest_AllShards); ok {
		return x.AllShards
	}
	return false
}

type isGetUTXONodeRequest_UtxoType interface {
	isGetUTXONodeRequest_UtxoType()
}

type GetUTXONodeRequest_UtxoRootHash struct {
	UtxoRootHash []byte `protobuf:"bytes,4,opt,name=utxo_root_hash,json=utxoRootHash,proto3,oneof"` // If set, use only this root hash
}

type GetUTXONodeRequest_ShardId struct {
	ShardId int32 `protobuf:"varint,5,opt,name=shard_id,json=shardId,proto3,oneof"` // if set, use current head of this shard
}

type GetUTXONodeRequest_AllShards struct {
	AllShards bool `protobuf:"varint,6,opt,name=all_shards,json=allShards,proto3,oneof"` // if set, return results for all shards
}

func (*GetUTXONodeRequest_UtxoRootHash) isGetUTXONodeRequest_UtxoType() {}

func (*GetUTXONodeRequest_ShardId) isGetUTXONodeRequest_UtxoType() {}

func (*GetUTXONodeRequest_AllShards) isGetUTXONodeRequest_UtxoType() {}

type GetUTXONodeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UtxoRootHash []byte `protobuf:"bytes,1,opt,name=utxo_root_hash,json=utxoRootHash,proto3" json:"utxo_root_hash,omitempty"` // Which root hash was used to create this answer
	// if empty, then there is no node at or below the given prefix
	// If there is not a node exactly at prefix, may start with a node under that prefix
	// if 'max_results' is set, then there could be other noder under the prefix in the answer list as well.
	// In no particular order.  If the limit isn't high enough and the caller wants a full view of the subtree under the node
	// the caller will have to explore the returned nodes and ask about whichever ones have children that are not in this answer set.
	//
	// If the caller doesn't really give a crap, the caller can simply request with a high 'max_results'
	Answer []*trie.TrieNode `protobuf:"bytes,2,rep,name=answer,proto3" json:"answer,omitempty"`
	// The nodes that go from the top utxo root to the
	// requested prefix or would if they prefix node existed
	Proof []*trie.TrieNode `protobuf:"bytes,3,rep,name=proof,proto3" json:"proof,omitempty"`
}

func (x *GetUTXONodeReply) Reset() {
	*x = GetUTXONodeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUTXONodeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUTXONodeReply) ProtoMessage() {}

func (x *GetUTXONodeReply) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUTXONodeReply.ProtoReflect.Descriptor instead.
func (*GetUTXONodeReply) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{36}
}

func (x *GetUTXONodeReply) GetUtxoRootHash() []byte {
	if x != nil {
		return x.UtxoRootHash
	}
	return nil
}

func (x *GetUTXONodeReply) GetAnswer() []*trie.TrieNode {
	if x != nil {
		return x.Answer
	}
	return nil
}

func (x *GetUTXONodeReply) GetProof() []*trie.TrieNode {
	if x != nil {
		return x.Proof
	}
	return nil
}

type GetUTXOReplyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maps shard id to GetUTXONodeReply
	ReplyMap map[int32]*GetUTXONodeReply `protobuf:"bytes,1,rep,name=reply_map,json=replyMap,proto3" json:"reply_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetUTXOReplyList) Reset() {
	*x = GetUTXOReplyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUTXOReplyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUTXOReplyList) ProtoMessage() {}

func (x *GetUTXOReplyList) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUTXOReplyList.ProtoReflect.Descriptor instead.
func (*GetUTXOReplyList) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{37}
}

func (x *GetUTXOReplyList) GetReplyMap() map[int32]*GetUTXONodeReply {
	if x != nil {
		return x.ReplyMap
	}
	return nil
}

type RequestAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressSpecHash []byte `protobuf:"bytes,1,opt,name=address_spec_hash,json=addressSpecHash,proto3" json:"address_spec_hash,omitempty"`
}

func (x *RequestAddress) Reset() {
	*x = RequestAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAddress) ProtoMessage() {}

func (x *RequestAddress) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAddress.ProtoReflect.Descriptor instead.
func (*RequestAddress) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{38}
}

func (x *RequestAddress) GetAddressSpecHash() []byte {
	if x != nil {
		return x.AddressSpecHash
	}
	return nil
}

type TransactionShardMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardMap map[int32]*TransactionHashList `protobuf:"bytes,1,rep,name=shard_map,json=shardMap,proto3" json:"shard_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TransactionShardMap) Reset() {
	*x = TransactionShardMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionShardMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionShardMap) ProtoMessage() {}

func (x *TransactionShardMap) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionShardMap.ProtoReflect.Descriptor instead.
func (*TransactionShardMap) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{39}
}

func (x *TransactionShardMap) GetShardMap() map[int32]*TransactionHashList {
	if x != nil {
		return x.ShardMap
	}
	return nil
}

type TransactionHashList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHashes [][]byte `protobuf:"bytes,1,rep,name=tx_hashes,json=txHashes,proto3" json:"tx_hashes,omitempty"`
}

func (x *TransactionHashList) Reset() {
	*x = TransactionHashList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionHashList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionHashList) ProtoMessage() {}

func (x *TransactionHashList) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionHashList.ProtoReflect.Descriptor instead.
func (*TransactionHashList) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{40}
}

func (x *TransactionHashList) GetTxHashes() [][]byte {
	if x != nil {
		return x.TxHashes
	}
	return nil
}

type HistoryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries    []*HistoryEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	NotEnabled bool            `protobuf:"varint,2,opt,name=not_enabled,json=notEnabled,proto3" json:"not_enabled,omitempty"`
}

func (x *HistoryList) Reset() {
	*x = HistoryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryList) ProtoMessage() {}

func (x *HistoryList) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryList.ProtoReflect.Descriptor instead.
func (*HistoryList) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{41}
}

func (x *HistoryList) GetEntries() []*HistoryEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *HistoryList) GetNotEnabled() bool {
	if x != nil {
		return x.NotEnabled
	}
	return false
}

type HistoryEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight int32  `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	TxHash      []byte `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	BlockHash   []byte `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (x *HistoryEntry) Reset() {
	*x = HistoryEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryEntry) ProtoMessage() {}

func (x *HistoryEntry) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryEntry.ProtoReflect.Descriptor instead.
func (*HistoryEntry) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{42}
}

func (x *HistoryEntry) GetBlockHeight() int32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *HistoryEntry) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *HistoryEntry) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

// A list of outputs
type TxOutList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutList []*TxOutPoint `protobuf:"bytes,1,rep,name=out_list,json=outList,proto3" json:"out_list,omitempty"`
}

func (x *TxOutList) Reset() {
	*x = TxOutList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxOutList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutList) ProtoMessage() {}

func (x *TxOutList) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutList.ProtoReflect.Descriptor instead.
func (*TxOutList) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{43}
}

func (x *TxOutList) GetOutList() []*TxOutPoint {
	if x != nil {
		return x.OutList
	}
	return nil
}

// A single output along with transaction id and out index
type TxOutPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Out    *TransactionOutput `protobuf:"bytes,1,opt,name=out,proto3" json:"out,omitempty"`
	TxHash []byte             `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	OutIdx int32              `protobuf:"varint,3,opt,name=out_idx,json=outIdx,proto3" json:"out_idx,omitempty"`
}

func (x *TxOutPoint) Reset() {
	*x = TxOutPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxOutPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutPoint) ProtoMessage() {}

func (x *TxOutPoint) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutPoint.ProtoReflect.Descriptor instead.
func (*TxOutPoint) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{44}
}

func (x *TxOutPoint) GetOut() *TransactionOutput {
	if x != nil {
		return x.Out
	}
	return nil
}

func (x *TxOutPoint) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *TxOutPoint) GetOutIdx() int32 {
	if x != nil {
		return x.OutIdx
	}
	return 0
}

type RequestNameID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameType RequestNameID_IdType `protobuf:"varint,1,opt,name=name_type,json=nameType,proto3,enum=snowblossom.RequestNameID_IdType" json:"name_type,omitempty"`
	Name     []byte               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RequestNameID) Reset() {
	*x = RequestNameID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestNameID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestNameID) ProtoMessage() {}

func (x *RequestNameID) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestNameID.ProtoReflect.Descriptor instead.
func (*RequestNameID) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{45}
}

func (x *RequestNameID) GetNameType() RequestNameID_IdType {
	if x != nil {
		return x.NameType
	}
	return RequestNameID_USERNAME
}

func (x *RequestNameID) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

type NullRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NullRequest) Reset() {
	*x = NullRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullRequest) ProtoMessage() {}

func (x *NullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullRequest.ProtoReflect.Descriptor instead.
func (*NullRequest) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{46}
}

type NodeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemPoolSize         int32            `protobuf:"varint,1,opt,name=mem_pool_size,json=memPoolSize,proto3" json:"mem_pool_size,omitempty"`
	ConnectedPeers      int32            `protobuf:"varint,2,opt,name=connected_peers,json=connectedPeers,proto3" json:"connected_peers,omitempty"`
	HeadSummary         *BlockSummary    `protobuf:"bytes,3,opt,name=head_summary,json=headSummary,proto3" json:"head_summary,omitempty"`
	EstimatedNodes      int32            `protobuf:"varint,4,opt,name=estimated_nodes,json=estimatedNodes,proto3" json:"estimated_nodes,omitempty"`
	NodeVersion         string           `protobuf:"bytes,5,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	VersionMap          map[string]int32 `protobuf:"bytes,6,rep,name=version_map,json=versionMap,proto3" json:"version_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Network             string           `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	NetworkActiveShards []int32          `protobuf:"varint,10,rep,packed,name=network_active_shards,json=networkActiveShards,proto3" json:"network_active_shards,omitempty"`
	ShardHeadMap        map[int32][]byte `protobuf:"bytes,11,rep,name=shard_head_map,json=shardHeadMap,proto3" json:"shard_head_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NetShardHeadMap     map[int32][]byte `protobuf:"bytes,12,rep,name=net_shard_head_map,json=netShardHeadMap,proto3" json:"net_shard_head_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	InterestShards      []int32          `protobuf:"varint,13,rep,packed,name=interest_shards,json=interestShards,proto3" json:"interest_shards,omitempty"`
}

func (x *NodeStatus) Reset() {
	*x = NodeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatus) ProtoMessage() {}

func (x *NodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatus.ProtoReflect.Descriptor instead.
func (*NodeStatus) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{47}
}

func (x *NodeStatus) GetMemPoolSize() int32 {
	if x != nil {
		return x.MemPoolSize
	}
	return 0
}

func (x *NodeStatus) GetConnectedPeers() int32 {
	if x != nil {
		return x.ConnectedPeers
	}
	return 0
}

func (x *NodeStatus) GetHeadSummary() *BlockSummary {
	if x != nil {
		return x.HeadSummary
	}
	return nil
}

func (x *NodeStatus) GetEstimatedNodes() int32 {
	if x != nil {
		return x.EstimatedNodes
	}
	return 0
}

func (x *NodeStatus) GetNodeVersion() string {
	if x != nil {
		return x.NodeVersion
	}
	return ""
}

func (x *NodeStatus) GetVersionMap() map[string]int32 {
	if x != nil {
		return x.VersionMap
	}
	return nil
}

func (x *NodeStatus) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *NodeStatus) GetNetworkActiveShards() []int32 {
	if x != nil {
		return x.NetworkActiveShards
	}
	return nil
}

func (x *NodeStatus) GetShardHeadMap() map[int32][]byte {
	if x != nil {
		return x.ShardHeadMap
	}
	return nil
}

func (x *NodeStatus) GetNetShardHeadMap() map[int32][]byte {
	if x != nil {
		return x.NetShardHeadMap
	}
	return nil
}

func (x *NodeStatus) GetInterestShards() []int32 {
	if x != nil {
		return x.InterestShards
	}
	return nil
}

type PeerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredResults int32 `protobuf:"varint,1,opt,name=desired_results,json=desiredResults,proto3" json:"desired_results,omitempty"`
	// If set, try to return peers that are members at least one of the specified trustnets
	TrustnetIds [][]byte `protobuf:"bytes,2,rep,name=trustnet_ids,json=trustnetIds,proto3" json:"trustnet_ids,omitempty"`
}

func (x *PeerListRequest) Reset() {
	*x = PeerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerListRequest) ProtoMessage() {}

func (x *PeerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerListRequest.ProtoReflect.Descriptor instead.
func (*PeerListRequest) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{48}
}

func (x *PeerListRequest) GetDesiredResults() int32 {
	if x != nil {
		return x.DesiredResults
	}
	return 0
}

func (x *PeerListRequest) GetTrustnetIds() [][]byte {
	if x != nil {
		return x.TrustnetIds
	}
	return nil
}

type PeerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peers []*PeerInfo `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *PeerList) Reset() {
	*x = PeerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerList) ProtoMessage() {}

func (x *PeerList) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerList.ProtoReflect.Descriptor instead.
func (*PeerList) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{49}
}

func (x *PeerList) GetPeers() []*PeerInfo {
	if x != nil {
		return x.Peers
	}
	return nil
}

// -----------------------------------------------------------------------
// LOCAL DATABASE THINGS - NOT PART OF PROTOCOL, NOT SENT OVER P2P NETWORK
// -----------------------------------------------------------------------
type BlockSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkSum            string       `protobuf:"bytes,1,opt,name=work_sum,json=workSum,proto3" json:"work_sum,omitempty"`
	BlocktimeAverageMs int64        `protobuf:"varint,2,opt,name=blocktime_average_ms,json=blocktimeAverageMs,proto3" json:"blocktime_average_ms,omitempty"`
	TargetAverage      string       `protobuf:"bytes,3,opt,name=target_average,json=targetAverage,proto3" json:"target_average,omitempty"`
	ActivatedField     int32        `protobuf:"varint,4,opt,name=activated_field,json=activatedField,proto3" json:"activated_field,omitempty"`
	Header             *BlockHeader `protobuf:"bytes,5,opt,name=header,proto3" json:"header,omitempty"`
	TotalTransactions  int64        `protobuf:"varint,6,opt,name=total_transactions,json=totalTransactions,proto3" json:"total_transactions,omitempty"`
	ChainIndexTrieHash []byte       `protobuf:"bytes,7,opt,name=chain_index_trie_hash,json=chainIndexTrieHash,proto3" json:"chain_index_trie_hash,omitempty"`
	SummaryVersion     int32        `protobuf:"varint,8,opt,name=summary_version,json=summaryVersion,proto3" json:"summary_version,omitempty"`
	// Current highest imported blocks from other shards
	ImportedShards map[int32]*BlockHeader `protobuf:"bytes,9,rep,name=imported_shards,json=importedShards,proto3" json:"imported_shards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TxSizeAverage  int64                  `protobuf:"varint,10,opt,name=tx_size_average,json=txSizeAverage,proto3" json:"tx_size_average,omitempty"`
	ShardLength    int32                  `protobuf:"varint,11,opt,name=shard_length,json=shardLength,proto3" json:"shard_length,omitempty"` // Number of blocks in this shard so far
	// Maps shard id to shard history
	// longer history, but just has heights and hashes, not full headers
	ShardHistoryMap map[int32]*BlockImportList `protobuf:"bytes,12,rep,name=shard_history_map,json=shardHistoryMap,proto3" json:"shard_history_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BlockTxCount    int64                      `protobuf:"varint,13,opt,name=block_tx_count,json=blockTxCount,proto3" json:"block_tx_count,omitempty"`
}

func (x *BlockSummary) Reset() {
	*x = BlockSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockSummary) ProtoMessage() {}

func (x *BlockSummary) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockSummary.ProtoReflect.Descriptor instead.
func (*BlockSummary) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{50}
}

func (x *BlockSummary) GetWorkSum() string {
	if x != nil {
		return x.WorkSum
	}
	return ""
}

func (x *BlockSummary) GetBlocktimeAverageMs() int64 {
	if x != nil {
		return x.BlocktimeAverageMs
	}
	return 0
}

func (x *BlockSummary) GetTargetAverage() string {
	if x != nil {
		return x.TargetAverage
	}
	return ""
}

func (x *BlockSummary) GetActivatedField() int32 {
	if x != nil {
		return x.ActivatedField
	}
	return 0
}

func (x *BlockSummary) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BlockSummary) GetTotalTransactions() int64 {
	if x != nil {
		return x.TotalTransactions
	}
	return 0
}

func (x *BlockSummary) GetChainIndexTrieHash() []byte {
	if x != nil {
		return x.ChainIndexTrieHash
	}
	return nil
}

func (x *BlockSummary) GetSummaryVersion() int32 {
	if x != nil {
		return x.SummaryVersion
	}
	return 0
}

func (x *BlockSummary) GetImportedShards() map[int32]*BlockHeader {
	if x != nil {
		return x.ImportedShards
	}
	return nil
}

func (x *BlockSummary) GetTxSizeAverage() int64 {
	if x != nil {
		return x.TxSizeAverage
	}
	return 0
}

func (x *BlockSummary) GetShardLength() int32 {
	if x != nil {
		return x.ShardLength
	}
	return 0
}

func (x *BlockSummary) GetShardHistoryMap() map[int32]*BlockImportList {
	if x != nil {
		return x.ShardHistoryMap
	}
	return nil
}

func (x *BlockSummary) GetBlockTxCount() int64 {
	if x != nil {
		return x.BlockTxCount
	}
	return 0
}

type ExternalHeadList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight int32    `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	HeadHashes  [][]byte `protobuf:"bytes,2,rep,name=head_hashes,json=headHashes,proto3" json:"head_hashes,omitempty"`
}

func (x *ExternalHeadList) Reset() {
	*x = ExternalHeadList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalHeadList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalHeadList) ProtoMessage() {}

func (x *ExternalHeadList) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalHeadList.ProtoReflect.Descriptor instead.
func (*ExternalHeadList) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{51}
}

func (x *ExternalHeadList) GetBlockHeight() int32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *ExternalHeadList) GetHeadHashes() [][]byte {
	if x != nil {
		return x.HeadHashes
	}
	return nil
}

// If anything is added or changed here, it is vital to update
// WalletUtil.mergeDatabase as needed and increase WalletUtil.WALLET_DB_VERSION
// Or else the new fields will not be copied in a merge resulting in terrible data loss.
type WalletDatabase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys              []*WalletKeyPair       `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	Addresses         []*AddressSpec         `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Transactions      []*Transaction         `protobuf:"bytes,3,rep,name=transactions,proto3" json:"transactions,omitempty"`
	UsedAddresses     map[string]bool        `protobuf:"bytes,4,rep,name=used_addresses,json=usedAddresses,proto3" json:"used_addresses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AddressCreateTime map[string]int64       `protobuf:"bytes,5,rep,name=address_create_time,json=addressCreateTime,proto3" json:"address_create_time,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Version           int32                  `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
	Network           string                 `protobuf:"bytes,11,opt,name=network,proto3" json:"network,omitempty"`
	Seeds             map[string]*SeedStatus `protobuf:"bytes,12,rep,name=seeds,proto3" json:"seeds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Xpubs             map[string]*SeedStatus `protobuf:"bytes,13,rep,name=xpubs,proto3" json:"xpubs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WalletDatabase) Reset() {
	*x = WalletDatabase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletDatabase) ProtoMessage() {}

func (x *WalletDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletDatabase.ProtoReflect.Descriptor instead.
func (*WalletDatabase) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{52}
}

func (x *WalletDatabase) GetKeys() []*WalletKeyPair {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *WalletDatabase) GetAddresses() []*AddressSpec {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *WalletDatabase) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *WalletDatabase) GetUsedAddresses() map[string]bool {
	if x != nil {
		return x.UsedAddresses
	}
	return nil
}

func (x *WalletDatabase) GetAddressCreateTime() map[string]int64 {
	if x != nil {
		return x.AddressCreateTime
	}
	return nil
}

func (x *WalletDatabase) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *WalletDatabase) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *WalletDatabase) GetSeeds() map[string]*SeedStatus {
	if x != nil {
		return x.Seeds
	}
	return nil
}

func (x *WalletDatabase) GetXpubs() map[string]*SeedStatus {
	if x != nil {
		return x.Xpubs
	}
	return nil
}

type EncryptedFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload                   []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"` //Encrypted EncryptedFilePayload
	Function                  string `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	Iv                        []byte `protobuf:"bytes,3,opt,name=iv,proto3" json:"iv,omitempty"`
	ScryptMemoryCost          int32  `protobuf:"varint,4,opt,name=scrypt_memory_cost,json=scryptMemoryCost,proto3" json:"scrypt_memory_cost,omitempty"`
	ScryptParallelizationCost int32  `protobuf:"varint,5,opt,name=scrypt_parallelization_cost,json=scryptParallelizationCost,proto3" json:"scrypt_parallelization_cost,omitempty"`
	ScryptCpuCost             int32  `protobuf:"varint,6,opt,name=scrypt_cpu_cost,json=scryptCpuCost,proto3" json:"scrypt_cpu_cost,omitempty"`
}

func (x *EncryptedFile) Reset() {
	*x = EncryptedFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedFile) ProtoMessage() {}

func (x *EncryptedFile) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedFile.ProtoReflect.Descriptor instead.
func (*EncryptedFile) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{53}
}

func (x *EncryptedFile) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *EncryptedFile) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *EncryptedFile) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *EncryptedFile) GetScryptMemoryCost() int32 {
	if x != nil {
		return x.ScryptMemoryCost
	}
	return 0
}

func (x *EncryptedFile) GetScryptParallelizationCost() int32 {
	if x != nil {
		return x.ScryptParallelizationCost
	}
	return 0
}

func (x *EncryptedFile) GetScryptCpuCost() int32 {
	if x != nil {
		return x.ScryptCpuCost
	}
	return 0
}

type EncryptedFilePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload    []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"` // Actual data contents
	Sha256Hash []byte `protobuf:"bytes,2,opt,name=sha256_hash,json=sha256Hash,proto3" json:"sha256_hash,omitempty"`
}

func (x *EncryptedFilePayload) Reset() {
	*x = EncryptedFilePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedFilePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedFilePayload) ProtoMessage() {}

func (x *EncryptedFilePayload) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedFilePayload.ProtoReflect.Descriptor instead.
func (*EncryptedFilePayload) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{54}
}

func (x *EncryptedFilePayload) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *EncryptedFilePayload) GetSha256Hash() []byte {
	if x != nil {
		return x.Sha256Hash
	}
	return nil
}

type SeedStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeedId       []byte          `protobuf:"bytes,1,opt,name=seed_id,json=seedId,proto3" json:"seed_id,omitempty"`
	AddressIndex map[int32]int32 `protobuf:"bytes,2,rep,name=address_index,json=addressIndex,proto3" json:"address_index,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SeedXpub     string          `protobuf:"bytes,3,opt,name=seed_xpub,json=seedXpub,proto3" json:"seed_xpub,omitempty"`
}

func (x *SeedStatus) Reset() {
	*x = SeedStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeedStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeedStatus) ProtoMessage() {}

func (x *SeedStatus) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeedStatus.ProtoReflect.Descriptor instead.
func (*SeedStatus) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{55}
}

func (x *SeedStatus) GetSeedId() []byte {
	if x != nil {
		return x.SeedId
	}
	return nil
}

func (x *SeedStatus) GetAddressIndex() map[int32]int32 {
	if x != nil {
		return x.AddressIndex
	}
	return nil
}

func (x *SeedStatus) GetSeedXpub() string {
	if x != nil {
		return x.SeedXpub
	}
	return ""
}

type BalanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Confirmed   int64 `protobuf:"varint,1,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	Unconfirmed int64 `protobuf:"varint,2,opt,name=unconfirmed,proto3" json:"unconfirmed,omitempty"`
	Spendable   int64 `protobuf:"varint,3,opt,name=spendable,proto3" json:"spendable,omitempty"`
}

func (x *BalanceInfo) Reset() {
	*x = BalanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceInfo) ProtoMessage() {}

func (x *BalanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceInfo.ProtoReflect.Descriptor instead.
func (*BalanceInfo) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{56}
}

func (x *BalanceInfo) GetConfirmed() int64 {
	if x != nil {
		return x.Confirmed
	}
	return 0
}

func (x *BalanceInfo) GetUnconfirmed() int64 {
	if x != nil {
		return x.Unconfirmed
	}
	return 0
}

func (x *BalanceInfo) GetSpendable() int64 {
	if x != nil {
		return x.Spendable
	}
	return 0
}

type WalletKeyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignatureType int32  `protobuf:"varint,1,opt,name=signature_type,json=signatureType,proto3" json:"signature_type,omitempty"`
	PublicKey     []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PrivateKey    []byte `protobuf:"bytes,3,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	SeedId        []byte `protobuf:"bytes,4,opt,name=seed_id,json=seedId,proto3" json:"seed_id,omitempty"`
	HdPath        string `protobuf:"bytes,5,opt,name=hd_path,json=hdPath,proto3" json:"hd_path,omitempty"`
	HdChange      int32  `protobuf:"varint,6,opt,name=hd_change,json=hdChange,proto3" json:"hd_change,omitempty"`
	HdIndex       int32  `protobuf:"varint,7,opt,name=hd_index,json=hdIndex,proto3" json:"hd_index,omitempty"`
}

func (x *WalletKeyPair) Reset() {
	*x = WalletKeyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletKeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletKeyPair) ProtoMessage() {}

func (x *WalletKeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletKeyPair.ProtoReflect.Descriptor instead.
func (*WalletKeyPair) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{57}
}

func (x *WalletKeyPair) GetSignatureType() int32 {
	if x != nil {
		return x.SignatureType
	}
	return 0
}

func (x *WalletKeyPair) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *WalletKeyPair) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *WalletKeyPair) GetSeedId() []byte {
	if x != nil {
		return x.SeedId
	}
	return nil
}

func (x *WalletKeyPair) GetHdPath() string {
	if x != nil {
		return x.HdPath
	}
	return ""
}

func (x *WalletKeyPair) GetHdChange() int32 {
	if x != nil {
		return x.HdChange
	}
	return 0
}

func (x *WalletKeyPair) GetHdIndex() int32 {
	if x != nil {
		return x.HdIndex
	}
	return 0
}

type SignedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"` //A serialized SignedMessagePayload
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignedMessage) Reset() {
	*x = SignedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedMessage) ProtoMessage() {}

func (x *SignedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedMessage.ProtoReflect.Descriptor instead.
func (*SignedMessage) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{58}
}

func (x *SignedMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SignedMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SignedMessagePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Claim     *AddressSpec `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim,omitempty"`
	Timestamp int64        `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to Z:
	//	*SignedMessagePayload_TlsPublicKey
	//	*SignedMessagePayload_PeerTipInfo
	//	*SignedMessagePayload_PeerInfo
	Z isSignedMessagePayload_Z `protobuf_oneof:"z"`
}

func (x *SignedMessagePayload) Reset() {
	*x = SignedMessagePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protolib_snowblossom_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedMessagePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedMessagePayload) ProtoMessage() {}

func (x *SignedMessagePayload) ProtoReflect() protoreflect.Message {
	mi := &file_protolib_snowblossom_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedMessagePayload.ProtoReflect.Descriptor instead.
func (*SignedMessagePayload) Descriptor() ([]byte, []int) {
	return file_protolib_snowblossom_proto_rawDescGZIP(), []int{59}
}

func (x *SignedMessagePayload) GetClaim() *AddressSpec {
	if x != nil {
		return x.Claim
	}
	return nil
}

func (x *SignedMessagePayload) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (m *SignedMessagePayload) GetZ() isSignedMessagePayload_Z {
	if m != nil {
		return m.Z
	}
	return nil
}

func (x *SignedMessagePayload) GetTlsPublicKey() []byte {
	if x, ok := x.GetZ().(*SignedMessagePayload_TlsPublicKey); ok {
		return x.TlsPublicKey
	}
	return nil
}

func (x *SignedMessagePayload) GetPeerTipInfo() *PeerTipInfo {
	if x, ok := x.GetZ().(*SignedMessagePayload_PeerTipInfo); ok {
		return x.PeerTipInfo
	}
	return nil
}

func (x *SignedMessagePayload) GetPeerInfo() *PeerInfo {
	if x, ok := x.GetZ().(*SignedMessagePayload_PeerInfo); ok {
		return x.PeerInfo
	}
	return nil
}

type isSignedMessagePayload_Z interface {
	isSignedMessagePayload_Z()
}

type SignedMessagePayload_TlsPublicKey struct {
	TlsPublicKey []byte `protobuf:"bytes,5,opt,name=tls_public_key,json=tlsPublicKey,proto3,oneof"`
}

type SignedMessagePayload_PeerTipInfo struct {
	//bytes blockhash = 6;
	PeerTipInfo *PeerTipInfo `protobuf:"bytes,7,opt,name=peer_tip_info,json=peerTipInfo,proto3,oneof"`
}

type SignedMessagePayload_PeerInfo struct {
	PeerInfo *PeerInfo `protobuf:"bytes,8,opt,name=peer_info,json=peerInfo,proto3,oneof"`
}

func (*SignedMessagePayload_TlsPublicKey) isSignedMessagePayload_Z() {}

func (*SignedMessagePayload_PeerTipInfo) isSignedMessagePayload_Z() {}

func (*SignedMessagePayload_PeerInfo) isSignedMessagePayload_Z() {}

var File_protolib_snowblossom_proto protoreflect.FileDescriptor

var file_protolib_snowblossom_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x69, 0x62, 0x2f, 0x73, 0x6e, 0x6f, 0x77, 0x62,
	0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x6e,
	0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x1a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6c, 0x69, 0x62, 0x2f, 0x74, 0x72, 0x69, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc,
	0x01, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62,
	0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0e, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0xfa, 0x01,
	0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x54, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6e, 0x6f, 0x77,
	0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x61, 0x0a, 0x12, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4a, 0x0a, 0x12, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06,
	0x74, 0x78, 0x4f, 0x75, 0x74, 0x73, 0x22, 0x5d, 0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x61,
	0x77, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x75, 0x74, 0x49, 0x64, 0x78, 0x22, 0x54, 0x0a, 0x0c, 0x53, 0x6e, 0x6f, 0x77, 0x50, 0x6f, 0x77,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x78,
	0x12, 0x29, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x6d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0xbd, 0x06, 0x0a, 0x0b,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x74,
	0x78, 0x6f, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x75, 0x74, 0x78, 0x6f, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x6e, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x73, 0x6e, 0x6f, 0x77, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x6e, 0x6f, 0x77, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x73, 0x6e, 0x6f, 0x77, 0x48, 0x61, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x6f, 0x77, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e,
	0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x50, 0x6f,
	0x77, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x08, 0x70, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x66, 0x0a, 0x16, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x6e,
	0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x4c, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6e, 0x6f, 0x77,
	0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x27, 0x0a, 0x10, 0x74, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x78, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x78,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x46, 0x0a, 0x18, 0x53, 0x68, 0x61, 0x72, 0x64, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a,
	0x10, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x01, 0x0a, 0x0f,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x4a, 0x0a, 0x0a, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f,
	0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x2e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x70, 0x1a, 0x3c, 0x0a, 0x0e, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x0b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73,
	0x73, 0x6f, 0x6d, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xde,
	0x02, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x0f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c,
	0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x73, 0x52, 0x0e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73,
	0x6f, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73,
	0x73, 0x6f, 0x6d, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22,
	0xbe, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x22, 0x72, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f,
	0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x49, 0x64, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x78, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x09,
	0x73, 0x72, 0x63, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x73, 0x72, 0x63, 0x54, 0x78, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f,
	0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x73, 0x72, 0x63, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x49, 0x64, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xb1, 0x02, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x48, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73,
	0x73, 0x6f, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x66, 0x6f, 0x72,
	0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x66, 0x6f, 0x72,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x4f, 0x66, 0x53, 0x70, 0x65, 0x63, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x31, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x22, 0x52, 0x0a, 0x12, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6b, 0x0a, 0x0b, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62,
	0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x53, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08,
	0x73, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x73, 0x22, 0x4f, 0x0a, 0x07, 0x53, 0x69, 0x67, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x60, 0x0a, 0x0d, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6e, 0x6f, 0x77,
	0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x68, 0x61, 0x72, 0x64, 0x22, 0xde, 0x05, 0x0a, 0x0b,
	0x50, 0x65, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c,
	0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x02, 0x74, 0x78, 0x12, 0x2d, 0x0a, 0x03, 0x74, 0x69, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73,
	0x6f, 0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x70, 0x48,
	0x00, 0x52, 0x03, 0x74, 0x69, 0x70, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x6f, 0x77,
	0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x71, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x2a, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x71, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x32,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c,
	0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3f, 0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e,
	0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4e, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x5f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x71, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x42, 0x03, 0x0a, 0x01, 0x7a, 0x22, 0xe7, 0x01, 0x0a,
	0x0c, 0x50, 0x65, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x70, 0x12, 0x21, 0x0a,
	0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x22, 0x7e, 0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x54, 0x69,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c,
	0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x38, 0x0a, 0x0a,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x09, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x48, 0x65, 0x61, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6e, 0x6f, 0x77, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x6e, 0x6f, 0x77, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x13, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x22,
	0x45, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x35, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x08, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0x90, 0x04, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x6e, 0x6f,
	0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x53, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x6e, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x55, 0x0a, 0x19, 0x74, 0x72, 0x75, 0x73, 0x74, 0x6e, 0x65, 0x74,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c,
	0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x16, 0x74, 0x72, 0x75, 0x73, 0x74, 0x6e, 0x65, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2c, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x47,
	0x52, 0x50, 0x43, 0x5f, 0x54, 0x4c, 0x53, 0x10, 0x01, 0x22, 0xc1, 0x01, 0x0a, 0x11, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x6d,
	0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07,
	0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0x0a, 0x01, 0x7a, 0x22, 0x74, 0x0a,
	0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1f, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23,
	0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x42, 0x03,
	0x0a, 0x01, 0x7a, 0x22, 0x34, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x35, 0x0a, 0x14, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x22, 0x2d, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x22,
	0x7a, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x42, 0x03, 0x0a, 0x01, 0x7a, 0x22, 0x7e, 0x0a, 0x0d, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x74, 0x78, 0x6f, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x73, 0x0a, 0x0b, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x22, 0xb1, 0x01, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x12, 0x20, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x50, 0x65, 0x72, 0x42, 0x79,
	0x74, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73,
	0x73, 0x6f, 0x6d, 0x2e, 0x46, 0x65, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x1a, 0x3b, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xc7, 0x02, 0x0a, 0x1d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x17, 0x70, 0x61, 0x79, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x70, 0x61, 0x79, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x73, 0x52, 0x06,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x12, 0x58, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x6e, 0x6f,
	0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x73,
	0x1a, 0x3c, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe5,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x54, 0x58, 0x4f, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x74, 0x78, 0x6f, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x75,
	0x74, 0x78, 0x6f, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x08, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09,
	0x61, 0x6c, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x75, 0x74, 0x78,
	0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x54,
	0x58, 0x4f, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x75,
	0x74, 0x78, 0x6f, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x75, 0x74, 0x78, 0x6f, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e,
	0x54, 0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x54, 0x72,
	0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0xb8, 0x01,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x54, 0x58, 0x4f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73,
	0x73, 0x6f, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x54, 0x58, 0x4f, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x70, 0x1a, 0x5a, 0x0a, 0x0d,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x54, 0x58, 0x4f, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3c, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70,
	0x65, 0x63, 0x48, 0x61, 0x73, 0x68, 0x22, 0xc1, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x4b,
	0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x4d, 0x61, 0x70, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x1a, 0x5d, 0x0a, 0x0d, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x32, 0x0a, 0x13, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x22, 0x63,
	0x0a, 0x0b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0x69, 0x0a, 0x0c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x3f,
	0x0a, 0x09, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x6f,
	0x75, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x54, 0x78, 0x4f, 0x75,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x70, 0x0a, 0x0a, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x30, 0x0a,
	0x03, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6e, 0x6f,
	0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x03, 0x6f, 0x75, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x5f,
	0x69, 0x64, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x49, 0x64,
	0x78, 0x22, 0x8c, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f,
	0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x49, 0x44, 0x2e, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x27, 0x0a, 0x06, 0x49, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01,
	0x22, 0x0d, 0x0a, 0x0b, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x94, 0x06, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22,
	0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x68,
	0x65, 0x61, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x68, 0x65,
	0x61, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6e, 0x6f,
	0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x4f, 0x0a,
	0x0e, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73,
	0x73, 0x6f, 0x6d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x48, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x64, 0x48, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x59,
	0x0a, 0x12, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x6e, 0x6f,
	0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x48, 0x65, 0x61, 0x64,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x48, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x72, 0x64, 0x48, 0x65, 0x61, 0x64, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4e, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x48, 0x65,
	0x61, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5d, 0x0a, 0x0f, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x75, 0x73, 0x74, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x6e,
	0x65, 0x74, 0x49, 0x64, 0x73, 0x22, 0x37, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0xcc,
	0x06, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74,
	0x69, 0x6d, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2d,
	0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a,
	0x15, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x72, 0x69,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x72, 0x69, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0f, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x78, 0x53, 0x69,
	0x7a, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x5a, 0x0a, 0x11,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c,
	0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x5b,
	0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f,
	0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x14, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73,
	0x6f, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x56, 0x0a,
	0x10, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x48,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x22, 0xcf, 0x06, 0x0a, 0x0e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f,
	0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e,
	0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f,
	0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55,
	0x0a, 0x0e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f,
	0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d,
	0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x3c, 0x0a,
	0x05, 0x73, 0x65, 0x65, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73,
	0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x65, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x65, 0x65, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x78,
	0x70, 0x75, 0x62, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6e, 0x6f,
	0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x58, 0x70, 0x75, 0x62, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x78, 0x70, 0x75, 0x62, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x55, 0x73, 0x65,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x51, 0x0a, 0x0a, 0x53, 0x65, 0x65, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x53,
	0x65, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x51, 0x0a, 0x0a, 0x58, 0x70, 0x75, 0x62, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f,
	0x6d, 0x2e, 0x53, 0x65, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xeb, 0x01, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x76, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x3e, 0x0a,
	0x1b, 0x73, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x19, 0x73, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c,
	0x65, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x63, 0x72, 0x79, 0x70, 0x74, 0x43, 0x70,
	0x75, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x14, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x32, 0x35,
	0x36, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x68,
	0x61, 0x32, 0x35, 0x36, 0x48, 0x61, 0x73, 0x68, 0x22, 0xd3, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x65, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x65, 0x65, 0x64, 0x49, 0x64,
	0x12, 0x4e, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c,
	0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x53, 0x65, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x78, 0x70, 0x75, 0x62, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x65, 0x64, 0x58, 0x70, 0x75, 0x62, 0x1a, 0x3f, 0x0a,
	0x11, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6b,
	0x0a, 0x0b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x75,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x0d,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x68, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x64, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x68, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x47,
	0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x87, 0x02, 0x0a, 0x14, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x2e, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26,
	0x0a, 0x0e, 0x74, 0x6c, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x6c, 0x73, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x54, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x54,
	0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6e, 0x6f, 0x77,
	0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03, 0x0a, 0x01,
	0x7a, 0x32, 0x5b, 0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x4c, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73,
	0x6f, 0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18,
	0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x32, 0xbd,
	0x0d, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c,
	0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62,
	0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73,
	0x6f, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x00, 0x30, 0x01, 0x12, 0x64, 0x0a, 0x1c,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2a, 0x2e, 0x73,
	0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62,
	0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x74, 0x0a, 0x24, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x2a, 0x2e, 0x73, 0x6e, 0x6f,
	0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f,
	0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c,
	0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x18, 0x2e, 0x73, 0x6e,
	0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x73,
	0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f,
	0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x54, 0x58, 0x4f, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x1f, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x54, 0x58, 0x4f, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x54, 0x58, 0x4f, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x54, 0x58, 0x4f, 0x4e, 0x6f,
	0x64, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x1f, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c,
	0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x54, 0x58, 0x4f, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62,
	0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x54, 0x58, 0x4f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f,
	0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x1a, 0x20, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f,
	0x6d, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73,
	0x68, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x70, 0x12, 0x1b, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f,
	0x6d, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x1a, 0x20, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d,
	0x61, 0x70, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x2e, 0x73, 0x6e, 0x6f, 0x77,
	0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f,
	0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f,
	0x6d, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x19, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73,
	0x6f, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a,
	0x12, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x20, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62,
	0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x1a, 0x19, 0x2e, 0x73, 0x6e, 0x6f,
	0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x73, 0x6e, 0x6f, 0x77,
	0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x73, 0x6e, 0x6f,
	0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x1e, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x4d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f,
	0x6d, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73,
	0x6f, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x00,
	0x12, 0x46, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73,
	0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x46, 0x65, 0x65, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46,
	0x42, 0x4f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f,
	0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x1a, 0x16, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f,
	0x6d, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x41, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x73, 0x6e, 0x6f,
	0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f,
	0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1c, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x1b, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x1a,
	0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x54,
	0x0a, 0x11, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x10, 0x53, 0x6e, 0x6f, 0x77, 0x42, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x6f, 0x2e, 0x73, 0x6e, 0x6f, 0x77,
	0x62, 0x6c, 0x6f, 0x73, 0x73, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x73, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f,
	0x73, 0x73, 0x6f, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protolib_snowblossom_proto_rawDescOnce sync.Once
	file_protolib_snowblossom_proto_rawDescData = file_protolib_snowblossom_proto_rawDesc
)

func file_protolib_snowblossom_proto_rawDescGZIP() []byte {
	file_protolib_snowblossom_proto_rawDescOnce.Do(func() {
		file_protolib_snowblossom_proto_rawDescData = protoimpl.X.CompressGZIP(file_protolib_snowblossom_proto_rawDescData)
	})
	return file_protolib_snowblossom_proto_rawDescData
}

var file_protolib_snowblossom_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_protolib_snowblossom_proto_msgTypes = make([]protoimpl.MessageInfo, 78)
var file_protolib_snowblossom_proto_goTypes = []interface{}{
	(PeerInfo_ConnectionType)(0),          // 0: snowblossom.PeerInfo.ConnectionType
	(RequestNameID_IdType)(0),             // 1: snowblossom.RequestNameID.IdType
	(*Block)(nil),                         // 2: snowblossom.Block
	(*ImportedBlock)(nil),                 // 3: snowblossom.ImportedBlock
	(*ImportedOutputList)(nil),            // 4: snowblossom.ImportedOutputList
	(*ImportedOutput)(nil),                // 5: snowblossom.ImportedOutput
	(*SnowPowProof)(nil),                  // 6: snowblossom.SnowPowProof
	(*BlockHeader)(nil),                   // 7: snowblossom.BlockHeader
	(*BlockImportList)(nil),               // 8: snowblossom.BlockImportList
	(*Transaction)(nil),                   // 9: snowblossom.Transaction
	(*TransactionInner)(nil),              // 10: snowblossom.TransactionInner
	(*CoinbaseExtras)(nil),                // 11: snowblossom.CoinbaseExtras
	(*TransactionRequirements)(nil),       // 12: snowblossom.TransactionRequirements
	(*SignatureEntry)(nil),                // 13: snowblossom.SignatureEntry
	(*TransactionInput)(nil),              // 14: snowblossom.TransactionInput
	(*TransactionOutput)(nil),             // 15: snowblossom.TransactionOutput
	(*ClaimedIdentifiers)(nil),            // 16: snowblossom.ClaimedIdentifiers
	(*AddressSpec)(nil),                   // 17: snowblossom.AddressSpec
	(*SigSpec)(nil),                       // 18: snowblossom.SigSpec
	(*BlockTemplate)(nil),                 // 19: snowblossom.BlockTemplate
	(*PeerMessage)(nil),                   // 20: snowblossom.PeerMessage
	(*PeerChainTip)(nil),                  // 21: snowblossom.PeerChainTip
	(*PeerTipInfo)(nil),                   // 22: snowblossom.PeerTipInfo
	(*BlockPreview)(nil),                  // 23: snowblossom.BlockPreview
	(*RequestPreviewChain)(nil),           // 24: snowblossom.RequestPreviewChain
	(*PreviewChain)(nil),                  // 25: snowblossom.PreviewChain
	(*PeerInfo)(nil),                      // 26: snowblossom.PeerInfo
	(*TransactionStatus)(nil),             // 27: snowblossom.TransactionStatus
	(*RequestBlock)(nil),                  // 28: snowblossom.RequestBlock
	(*RequestBlockSummary)(nil),           // 29: snowblossom.RequestBlockSummary
	(*RequestImportedBlock)(nil),          // 30: snowblossom.RequestImportedBlock
	(*RequestTransaction)(nil),            // 31: snowblossom.RequestTransaction
	(*RequestBlockHeader)(nil),            // 32: snowblossom.RequestBlockHeader
	(*AddressUpdate)(nil),                 // 33: snowblossom.AddressUpdate
	(*SubmitReply)(nil),                   // 34: snowblossom.SubmitReply
	(*FeeEstimate)(nil),                   // 35: snowblossom.FeeEstimate
	(*SubscribeBlockTemplateRequest)(nil), // 36: snowblossom.SubscribeBlockTemplateRequest
	(*GetUTXONodeRequest)(nil),            // 37: snowblossom.GetUTXONodeRequest
	(*GetUTXONodeReply)(nil),              // 38: snowblossom.GetUTXONodeReply
	(*GetUTXOReplyList)(nil),              // 39: snowblossom.GetUTXOReplyList
	(*RequestAddress)(nil),                // 40: snowblossom.RequestAddress
	(*TransactionShardMap)(nil),           // 41: snowblossom.TransactionShardMap
	(*TransactionHashList)(nil),           // 42: snowblossom.TransactionHashList
	(*HistoryList)(nil),                   // 43: snowblossom.HistoryList
	(*HistoryEntry)(nil),                  // 44: snowblossom.HistoryEntry
	(*TxOutList)(nil),                     // 45: snowblossom.TxOutList
	(*TxOutPoint)(nil),                    // 46: snowblossom.TxOutPoint
	(*RequestNameID)(nil),                 // 47: snowblossom.RequestNameID
	(*NullRequest)(nil),                   // 48: snowblossom.NullRequest
	(*NodeStatus)(nil),                    // 49: snowblossom.NodeStatus
	(*PeerListRequest)(nil),               // 50: snowblossom.PeerListRequest
	(*PeerList)(nil),                      // 51: snowblossom.PeerList
	(*BlockSummary)(nil),                  // 52: snowblossom.BlockSummary
	(*ExternalHeadList)(nil),              // 53: snowblossom.ExternalHeadList
	(*WalletDatabase)(nil),                // 54: snowblossom.WalletDatabase
	(*EncryptedFile)(nil),                 // 55: snowblossom.EncryptedFile
	(*EncryptedFilePayload)(nil),          // 56: snowblossom.EncryptedFilePayload
	(*SeedStatus)(nil),                    // 57: snowblossom.SeedStatus
	(*BalanceInfo)(nil),                   // 58: snowblossom.BalanceInfo
	(*WalletKeyPair)(nil),                 // 59: snowblossom.WalletKeyPair
	(*SignedMessage)(nil),                 // 60: snowblossom.SignedMessage
	(*SignedMessagePayload)(nil),          // 61: snowblossom.SignedMessagePayload
	nil,                                   // 62: snowblossom.ImportedBlock.ImportOutputsEntry
	nil,                                   // 63: snowblossom.BlockHeader.ShardExportRootHashEntry
	nil,                                   // 64: snowblossom.BlockHeader.ShardImportEntry
	nil,                                   // 65: snowblossom.BlockImportList.HeightMapEntry
	nil,                                   // 66: snowblossom.FeeEstimate.ShardMapEntry
	nil,                                   // 67: snowblossom.SubscribeBlockTemplateRequest.PayRatiosEntry
	nil,                                   // 68: snowblossom.GetUTXOReplyList.ReplyMapEntry
	nil,                                   // 69: snowblossom.TransactionShardMap.ShardMapEntry
	nil,                                   // 70: snowblossom.NodeStatus.VersionMapEntry
	nil,                                   // 71: snowblossom.NodeStatus.ShardHeadMapEntry
	nil,                                   // 72: snowblossom.NodeStatus.NetShardHeadMapEntry
	nil,                                   // 73: snowblossom.BlockSummary.ImportedShardsEntry
	nil,                                   // 74: snowblossom.BlockSummary.ShardHistoryMapEntry
	nil,                                   // 75: snowblossom.WalletDatabase.UsedAddressesEntry
	nil,                                   // 76: snowblossom.WalletDatabase.AddressCreateTimeEntry
	nil,                                   // 77: snowblossom.WalletDatabase.SeedsEntry
	nil,                                   // 78: snowblossom.WalletDatabase.XpubsEntry
	nil,                                   // 79: snowblossom.SeedStatus.AddressIndexEntry
	(*trie.TrieNode)(nil),                 // 80: snowblossom.TrieNode
}
var file_protolib_snowblossom_proto_depIdxs = []int32{
	7,  // 0: snowblossom.Block.header:type_name -> snowblossom.BlockHeader
	9,  // 1: snowblossom.Block.transactions:type_name -> snowblossom.Transaction
	3,  // 2: snowblossom.Block.imported_blocks:type_name -> snowblossom.ImportedBlock
	7,  // 3: snowblossom.ImportedBlock.header:type_name -> snowblossom.BlockHeader
	62, // 4: snowblossom.ImportedBlock.import_outputs:type_name -> snowblossom.ImportedBlock.ImportOutputsEntry
	5,  // 5: snowblossom.ImportedOutputList.tx_outs:type_name -> snowblossom.ImportedOutput
	6,  // 6: snowblossom.BlockHeader.pow_proof:type_name -> snowblossom.SnowPowProof
	63, // 7: snowblossom.BlockHeader.shard_export_root_hash:type_name -> snowblossom.BlockHeader.ShardExportRootHashEntry
	64, // 8: snowblossom.BlockHeader.shard_import:type_name -> snowblossom.BlockHeader.ShardImportEntry
	65, // 9: snowblossom.BlockImportList.height_map:type_name -> snowblossom.BlockImportList.HeightMapEntry
	13, // 10: snowblossom.Transaction.signatures:type_name -> snowblossom.SignatureEntry
	11, // 11: snowblossom.TransactionInner.coinbase_extras:type_name -> snowblossom.CoinbaseExtras
	14, // 12: snowblossom.TransactionInner.inputs:type_name -> snowblossom.TransactionInput
	15, // 13: snowblossom.TransactionInner.outputs:type_name -> snowblossom.TransactionOutput
	17, // 14: snowblossom.TransactionInner.claims:type_name -> snowblossom.AddressSpec
	12, // 15: snowblossom.TransactionOutput.requirements:type_name -> snowblossom.TransactionRequirements
	16, // 16: snowblossom.TransactionOutput.ids:type_name -> snowblossom.ClaimedIdentifiers
	18, // 17: snowblossom.AddressSpec.sig_specs:type_name -> snowblossom.SigSpec
	2,  // 18: snowblossom.BlockTemplate.block:type_name -> snowblossom.Block
	9,  // 19: snowblossom.PeerMessage.tx:type_name -> snowblossom.Transaction
	21, // 20: snowblossom.PeerMessage.tip:type_name -> snowblossom.PeerChainTip
	28, // 21: snowblossom.PeerMessage.req_block:type_name -> snowblossom.RequestBlock
	2,  // 22: snowblossom.PeerMessage.block:type_name -> snowblossom.Block
	32, // 23: snowblossom.PeerMessage.req_header:type_name -> snowblossom.RequestBlockHeader
	7,  // 24: snowblossom.PeerMessage.header:type_name -> snowblossom.BlockHeader
	31, // 25: snowblossom.PeerMessage.req_cluster:type_name -> snowblossom.RequestTransaction
	30, // 26: snowblossom.PeerMessage.req_import_block:type_name -> snowblossom.RequestImportedBlock
	3,  // 27: snowblossom.PeerMessage.import_block:type_name -> snowblossom.ImportedBlock
	24, // 28: snowblossom.PeerMessage.req_preview_chain:type_name -> snowblossom.RequestPreviewChain
	25, // 29: snowblossom.PeerMessage.preview_chain:type_name -> snowblossom.PreviewChain
	7,  // 30: snowblossom.PeerChainTip.header:type_name -> snowblossom.BlockHeader
	26, // 31: snowblossom.PeerChainTip.peers:type_name -> snowblossom.PeerInfo
	60, // 32: snowblossom.PeerChainTip.signed_head:type_name -> snowblossom.SignedMessage
	23, // 33: snowblossom.PeerTipInfo.previews:type_name -> snowblossom.BlockPreview
	23, // 34: snowblossom.PeerTipInfo.coord_head:type_name -> snowblossom.BlockPreview
	23, // 35: snowblossom.PreviewChain.previews:type_name -> snowblossom.BlockPreview
	0,  // 36: snowblossom.PeerInfo.connection_type:type_name -> snowblossom.PeerInfo.ConnectionType
	60, // 37: snowblossom.PeerInfo.trustnet_signed_peer_info:type_name -> snowblossom.SignedMessage
	66, // 38: snowblossom.FeeEstimate.shard_map:type_name -> snowblossom.FeeEstimate.ShardMapEntry
	11, // 39: snowblossom.SubscribeBlockTemplateRequest.extras:type_name -> snowblossom.CoinbaseExtras
	67, // 40: snowblossom.SubscribeBlockTemplateRequest.pay_ratios:type_name -> snowblossom.SubscribeBlockTemplateRequest.PayRatiosEntry
	80, // 41: snowblossom.GetUTXONodeReply.answer:type_name -> snowblossom.TrieNode
	80, // 42: snowblossom.GetUTXONodeReply.proof:type_name -> snowblossom.TrieNode
	68, // 43: snowblossom.GetUTXOReplyList.reply_map:type_name -> snowblossom.GetUTXOReplyList.ReplyMapEntry
	69, // 44: snowblossom.TransactionShardMap.shard_map:type_name -> snowblossom.TransactionShardMap.ShardMapEntry
	44, // 45: snowblossom.HistoryList.entries:type_name -> snowblossom.HistoryEntry
	46, // 46: snowblossom.TxOutList.out_list:type_name -> snowblossom.TxOutPoint
	15, // 47: snowblossom.TxOutPoint.out:type_name -> snowblossom.TransactionOutput
	1,  // 48: snowblossom.RequestNameID.name_type:type_name -> snowblossom.RequestNameID.IdType
	52, // 49: snowblossom.NodeStatus.head_summary:type_name -> snowblossom.BlockSummary
	70, // 50: snowblossom.NodeStatus.version_map:type_name -> snowblossom.NodeStatus.VersionMapEntry
	71, // 51: snowblossom.NodeStatus.shard_head_map:type_name -> snowblossom.NodeStatus.ShardHeadMapEntry
	72, // 52: snowblossom.NodeStatus.net_shard_head_map:type_name -> snowblossom.NodeStatus.NetShardHeadMapEntry
	26, // 53: snowblossom.PeerList.peers:type_name -> snowblossom.PeerInfo
	7,  // 54: snowblossom.BlockSummary.header:type_name -> snowblossom.BlockHeader
	73, // 55: snowblossom.BlockSummary.imported_shards:type_name -> snowblossom.BlockSummary.ImportedShardsEntry
	74, // 56: snowblossom.BlockSummary.shard_history_map:type_name -> snowblossom.BlockSummary.ShardHistoryMapEntry
	59, // 57: snowblossom.WalletDatabase.keys:type_name -> snowblossom.WalletKeyPair
	17, // 58: snowblossom.WalletDatabase.addresses:type_name -> snowblossom.AddressSpec
	9,  // 59: snowblossom.WalletDatabase.transactions:type_name -> snowblossom.Transaction
	75, // 60: snowblossom.WalletDatabase.used_addresses:type_name -> snowblossom.WalletDatabase.UsedAddressesEntry
	76, // 61: snowblossom.WalletDatabase.address_create_time:type_name -> snowblossom.WalletDatabase.AddressCreateTimeEntry
	77, // 62: snowblossom.WalletDatabase.seeds:type_name -> snowblossom.WalletDatabase.SeedsEntry
	78, // 63: snowblossom.WalletDatabase.xpubs:type_name -> snowblossom.WalletDatabase.XpubsEntry
	79, // 64: snowblossom.SeedStatus.address_index:type_name -> snowblossom.SeedStatus.AddressIndexEntry
	17, // 65: snowblossom.SignedMessagePayload.claim:type_name -> snowblossom.AddressSpec
	22, // 66: snowblossom.SignedMessagePayload.peer_tip_info:type_name -> snowblossom.PeerTipInfo
	26, // 67: snowblossom.SignedMessagePayload.peer_info:type_name -> snowblossom.PeerInfo
	4,  // 68: snowblossom.ImportedBlock.ImportOutputsEntry.value:type_name -> snowblossom.ImportedOutputList
	8,  // 69: snowblossom.BlockHeader.ShardImportEntry.value:type_name -> snowblossom.BlockImportList
	38, // 70: snowblossom.GetUTXOReplyList.ReplyMapEntry.value:type_name -> snowblossom.GetUTXONodeReply
	42, // 71: snowblossom.TransactionShardMap.ShardMapEntry.value:type_name -> snowblossom.TransactionHashList
	7,  // 72: snowblossom.BlockSummary.ImportedShardsEntry.value:type_name -> snowblossom.BlockHeader
	8,  // 73: snowblossom.BlockSummary.ShardHistoryMapEntry.value:type_name -> snowblossom.BlockImportList
	57, // 74: snowblossom.WalletDatabase.SeedsEntry.value:type_name -> snowblossom.SeedStatus
	57, // 75: snowblossom.WalletDatabase.XpubsEntry.value:type_name -> snowblossom.SeedStatus
	20, // 76: snowblossom.PeerService.SubscribePeering:input_type -> snowblossom.PeerMessage
	36, // 77: snowblossom.UserService.SubscribeBlockTemplate:input_type -> snowblossom.SubscribeBlockTemplateRequest
	36, // 78: snowblossom.UserService.SubscribeBlockTemplateStream:input_type -> snowblossom.SubscribeBlockTemplateRequest
	36, // 79: snowblossom.UserService.SubscribeBlockTemplateStreamExtended:input_type -> snowblossom.SubscribeBlockTemplateRequest
	2,  // 80: snowblossom.UserService.SubmitBlock:input_type -> snowblossom.Block
	9,  // 81: snowblossom.UserService.SubmitTransaction:input_type -> snowblossom.Transaction
	37, // 82: snowblossom.UserService.GetUTXONode:input_type -> snowblossom.GetUTXONodeRequest
	37, // 83: snowblossom.UserService.GetUTXONodeMulti:input_type -> snowblossom.GetUTXONodeRequest
	40, // 84: snowblossom.UserService.GetMempoolTransactionList:input_type -> snowblossom.RequestAddress
	40, // 85: snowblossom.UserService.GetMempoolTransactionMap:input_type -> snowblossom.RequestAddress
	40, // 86: snowblossom.UserService.GetAddressHistory:input_type -> snowblossom.RequestAddress
	48, // 87: snowblossom.UserService.GetNodeStatus:input_type -> snowblossom.NullRequest
	28, // 88: snowblossom.UserService.GetBlock:input_type -> snowblossom.RequestBlock
	29, // 89: snowblossom.UserService.getBlockSummary:input_type -> snowblossom.RequestBlockSummary
	31, // 90: snowblossom.UserService.GetTransaction:input_type -> snowblossom.RequestTransaction
	31, // 91: snowblossom.UserService.GetTransactionStatus:input_type -> snowblossom.RequestTransaction
	32, // 92: snowblossom.UserService.GetBlockHeader:input_type -> snowblossom.RequestBlockHeader
	48, // 93: snowblossom.UserService.GetFeeEstimate:input_type -> snowblossom.NullRequest
	40, // 94: snowblossom.UserService.GetFBOList:input_type -> snowblossom.RequestAddress
	47, // 95: snowblossom.UserService.GetIDList:input_type -> snowblossom.RequestNameID
	50, // 96: snowblossom.UserService.GetPeerList:input_type -> snowblossom.PeerListRequest
	40, // 97: snowblossom.UserService.SubscribeAddressUpdates:input_type -> snowblossom.RequestAddress
	20, // 98: snowblossom.PeerService.SubscribePeering:output_type -> snowblossom.PeerMessage
	2,  // 99: snowblossom.UserService.SubscribeBlockTemplate:output_type -> snowblossom.Block
	2,  // 100: snowblossom.UserService.SubscribeBlockTemplateStream:output_type -> snowblossom.Block
	19, // 101: snowblossom.UserService.SubscribeBlockTemplateStreamExtended:output_type -> snowblossom.BlockTemplate
	34, // 102: snowblossom.UserService.SubmitBlock:output_type -> snowblossom.SubmitReply
	34, // 103: snowblossom.UserService.SubmitTransaction:output_type -> snowblossom.SubmitReply
	38, // 104: snowblossom.UserService.GetUTXONode:output_type -> snowblossom.GetUTXONodeReply
	39, // 105: snowblossom.UserService.GetUTXONodeMulti:output_type -> snowblossom.GetUTXOReplyList
	42, // 106: snowblossom.UserService.GetMempoolTransactionList:output_type -> snowblossom.TransactionHashList
	41, // 107: snowblossom.UserService.GetMempoolTransactionMap:output_type -> snowblossom.TransactionShardMap
	43, // 108: snowblossom.UserService.GetAddressHistory:output_type -> snowblossom.HistoryList
	49, // 109: snowblossom.UserService.GetNodeStatus:output_type -> snowblossom.NodeStatus
	2,  // 110: snowblossom.UserService.GetBlock:output_type -> snowblossom.Block
	52, // 111: snowblossom.UserService.getBlockSummary:output_type -> snowblossom.BlockSummary
	9,  // 112: snowblossom.UserService.GetTransaction:output_type -> snowblossom.Transaction
	27, // 113: snowblossom.UserService.GetTransactionStatus:output_type -> snowblossom.TransactionStatus
	7,  // 114: snowblossom.UserService.GetBlockHeader:output_type -> snowblossom.BlockHeader
	35, // 115: snowblossom.UserService.GetFeeEstimate:output_type -> snowblossom.FeeEstimate
	45, // 116: snowblossom.UserService.GetFBOList:output_type -> snowblossom.TxOutList
	45, // 117: snowblossom.UserService.GetIDList:output_type -> snowblossom.TxOutList
	51, // 118: snowblossom.UserService.GetPeerList:output_type -> snowblossom.PeerList
	33, // 119: snowblossom.UserService.SubscribeAddressUpdates:output_type -> snowblossom.AddressUpdate
	98, // [98:120] is the sub-list for method output_type
	76, // [76:98] is the sub-list for method input_type
	76, // [76:76] is the sub-list for extension type_name
	76, // [76:76] is the sub-list for extension extendee
	0,  // [0:76] is the sub-list for field type_name
}

func init() { file_protolib_snowblossom_proto_init() }
func file_protolib_snowblossom_proto_init() {
	if File_protolib_snowblossom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protolib_snowblossom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportedBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportedOutputList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportedOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnowPowProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockImportList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionInner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinbaseExtras); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionRequirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimedIdentifiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerChainTip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerTipInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockPreview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestPreviewChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBlockSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestImportedBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeEstimate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeBlockTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUTXONodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUTXONodeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUTXOReplyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionShardMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionHashList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxOutList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxOutPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestNameID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalHeadList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletDatabase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedFilePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeedStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletKeyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protolib_snowblossom_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedMessagePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protolib_snowblossom_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*PeerMessage_Tx)(nil),
		(*PeerMessage_Tip)(nil),
		(*PeerMessage_ReqBlock)(nil),
		(*PeerMessage_Block)(nil),
		(*PeerMessage_ReqHeader)(nil),
		(*PeerMessage_Header)(nil),
		(*PeerMessage_ReqCluster)(nil),
		(*PeerMessage_ReqImportBlock)(nil),
		(*PeerMessage_ImportBlock)(nil),
		(*PeerMessage_ReqPreviewChain)(nil),
		(*PeerMessage_PreviewChain)(nil),
	}
	file_protolib_snowblossom_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*TransactionStatus_Unknown)(nil),
		(*TransactionStatus_Mempool)(nil),
		(*TransactionStatus_Confirmed)(nil),
	}
	file_protolib_snowblossom_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*RequestBlock_BlockHash)(nil),
		(*RequestBlock_BlockHeight)(nil),
	}
	file_protolib_snowblossom_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*RequestBlockHeader_BlockHeight)(nil),
		(*RequestBlockHeader_BlockHash)(nil),
	}
	file_protolib_snowblossom_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*GetUTXONodeRequest_UtxoRootHash)(nil),
		(*GetUTXONodeRequest_ShardId)(nil),
		(*GetUTXONodeRequest_AllShards)(nil),
	}
	file_protolib_snowblossom_proto_msgTypes[59].OneofWrappers = []interface{}{
		(*SignedMessagePayload_TlsPublicKey)(nil),
		(*SignedMessagePayload_PeerTipInfo)(nil),
		(*SignedMessagePayload_PeerInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protolib_snowblossom_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   78,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_protolib_snowblossom_proto_goTypes,
		DependencyIndexes: file_protolib_snowblossom_proto_depIdxs,
		EnumInfos:         file_protolib_snowblossom_proto_enumTypes,
		MessageInfos:      file_protolib_snowblossom_proto_msgTypes,
	}.Build()
	File_protolib_snowblossom_proto = out.File
	file_protolib_snowblossom_proto_rawDesc = nil
	file_protolib_snowblossom_proto_goTypes = nil
	file_protolib_snowblossom_proto_depIdxs = nil
}
