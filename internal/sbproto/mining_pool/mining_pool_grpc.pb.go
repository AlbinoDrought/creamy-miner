// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mining_pool

import (
	context "context"
	snowblossom "go.snowblossom/internal/sbproto/snowblossom"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiningPoolServiceClient is the client API for MiningPoolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiningPoolServiceClient interface {
	GetWork(ctx context.Context, in *GetWorkRequest, opts ...grpc.CallOption) (MiningPoolService_GetWorkClient, error)
	SubmitWork(ctx context.Context, in *WorkSubmitRequest, opts ...grpc.CallOption) (*snowblossom.SubmitReply, error)
}

type miningPoolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMiningPoolServiceClient(cc grpc.ClientConnInterface) MiningPoolServiceClient {
	return &miningPoolServiceClient{cc}
}

func (c *miningPoolServiceClient) GetWork(ctx context.Context, in *GetWorkRequest, opts ...grpc.CallOption) (MiningPoolService_GetWorkClient, error) {
	stream, err := c.cc.NewStream(ctx, &MiningPoolService_ServiceDesc.Streams[0], "/snowblossom.MiningPoolService/GetWork", opts...)
	if err != nil {
		return nil, err
	}
	x := &miningPoolServiceGetWorkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MiningPoolService_GetWorkClient interface {
	Recv() (*WorkUnit, error)
	grpc.ClientStream
}

type miningPoolServiceGetWorkClient struct {
	grpc.ClientStream
}

func (x *miningPoolServiceGetWorkClient) Recv() (*WorkUnit, error) {
	m := new(WorkUnit)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *miningPoolServiceClient) SubmitWork(ctx context.Context, in *WorkSubmitRequest, opts ...grpc.CallOption) (*snowblossom.SubmitReply, error) {
	out := new(snowblossom.SubmitReply)
	err := c.cc.Invoke(ctx, "/snowblossom.MiningPoolService/SubmitWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiningPoolServiceServer is the server API for MiningPoolService service.
// All implementations must embed UnimplementedMiningPoolServiceServer
// for forward compatibility
type MiningPoolServiceServer interface {
	GetWork(*GetWorkRequest, MiningPoolService_GetWorkServer) error
	SubmitWork(context.Context, *WorkSubmitRequest) (*snowblossom.SubmitReply, error)
	mustEmbedUnimplementedMiningPoolServiceServer()
}

// UnimplementedMiningPoolServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMiningPoolServiceServer struct {
}

func (UnimplementedMiningPoolServiceServer) GetWork(*GetWorkRequest, MiningPoolService_GetWorkServer) error {
	return status.Errorf(codes.Unimplemented, "method GetWork not implemented")
}
func (UnimplementedMiningPoolServiceServer) SubmitWork(context.Context, *WorkSubmitRequest) (*snowblossom.SubmitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitWork not implemented")
}
func (UnimplementedMiningPoolServiceServer) mustEmbedUnimplementedMiningPoolServiceServer() {}

// UnsafeMiningPoolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiningPoolServiceServer will
// result in compilation errors.
type UnsafeMiningPoolServiceServer interface {
	mustEmbedUnimplementedMiningPoolServiceServer()
}

func RegisterMiningPoolServiceServer(s grpc.ServiceRegistrar, srv MiningPoolServiceServer) {
	s.RegisterService(&MiningPoolService_ServiceDesc, srv)
}

func _MiningPoolService_GetWork_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetWorkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MiningPoolServiceServer).GetWork(m, &miningPoolServiceGetWorkServer{stream})
}

type MiningPoolService_GetWorkServer interface {
	Send(*WorkUnit) error
	grpc.ServerStream
}

type miningPoolServiceGetWorkServer struct {
	grpc.ServerStream
}

func (x *miningPoolServiceGetWorkServer) Send(m *WorkUnit) error {
	return x.ServerStream.SendMsg(m)
}

func _MiningPoolService_SubmitWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiningPoolServiceServer).SubmitWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowblossom.MiningPoolService/SubmitWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiningPoolServiceServer).SubmitWork(ctx, req.(*WorkSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MiningPoolService_ServiceDesc is the grpc.ServiceDesc for MiningPoolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MiningPoolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snowblossom.MiningPoolService",
	HandlerType: (*MiningPoolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitWork",
			Handler:    _MiningPoolService_SubmitWork_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetWork",
			Handler:       _MiningPoolService_GetWork_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protolib/mining_pool.proto",
}

// SharedMiningServiceClient is the client API for SharedMiningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SharedMiningServiceClient interface {
	GetWords(ctx context.Context, in *GetWordsRequest, opts ...grpc.CallOption) (*GetWordsResponce, error)
}

type sharedMiningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSharedMiningServiceClient(cc grpc.ClientConnInterface) SharedMiningServiceClient {
	return &sharedMiningServiceClient{cc}
}

func (c *sharedMiningServiceClient) GetWords(ctx context.Context, in *GetWordsRequest, opts ...grpc.CallOption) (*GetWordsResponce, error) {
	out := new(GetWordsResponce)
	err := c.cc.Invoke(ctx, "/snowblossom.SharedMiningService/GetWords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SharedMiningServiceServer is the server API for SharedMiningService service.
// All implementations must embed UnimplementedSharedMiningServiceServer
// for forward compatibility
type SharedMiningServiceServer interface {
	GetWords(context.Context, *GetWordsRequest) (*GetWordsResponce, error)
	mustEmbedUnimplementedSharedMiningServiceServer()
}

// UnimplementedSharedMiningServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSharedMiningServiceServer struct {
}

func (UnimplementedSharedMiningServiceServer) GetWords(context.Context, *GetWordsRequest) (*GetWordsResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWords not implemented")
}
func (UnimplementedSharedMiningServiceServer) mustEmbedUnimplementedSharedMiningServiceServer() {}

// UnsafeSharedMiningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SharedMiningServiceServer will
// result in compilation errors.
type UnsafeSharedMiningServiceServer interface {
	mustEmbedUnimplementedSharedMiningServiceServer()
}

func RegisterSharedMiningServiceServer(s grpc.ServiceRegistrar, srv SharedMiningServiceServer) {
	s.RegisterService(&SharedMiningService_ServiceDesc, srv)
}

func _SharedMiningService_GetWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharedMiningServiceServer).GetWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowblossom.SharedMiningService/GetWords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharedMiningServiceServer).GetWords(ctx, req.(*GetWordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SharedMiningService_ServiceDesc is the grpc.ServiceDesc for SharedMiningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SharedMiningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snowblossom.SharedMiningService",
	HandlerType: (*SharedMiningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWords",
			Handler:    _SharedMiningService_GetWords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protolib/mining_pool.proto",
}
